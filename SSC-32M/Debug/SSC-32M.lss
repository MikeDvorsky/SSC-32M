
SSC-32M.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  000013c0  00001474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001304  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  00005304  00001304  000013b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000036e  00802802  00802802  00001476  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00001476  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014a8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001d0  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000040c0  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002b87  00000000  00000000  00005778  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000142e  00000000  00000000  000082ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000410  00000000  00000000  00009730  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001fde  00000000  00000000  00009b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c25  00000000  00000000  0000bb1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001c8  00000000  00000000  0000c743  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
       4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      24:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__vector_9>
      28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      44:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__vector_17>
      48:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__vector_18>
      4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      68:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      6c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      70:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      74:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      78:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      7c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      80:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      84:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      88:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      8c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      90:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      94:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      98:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      9c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf ef       	ldi	r28, 0xFF	; 255
      a6:	cd bf       	out	0x3d, r28	; 61
      a8:	df e3       	ldi	r29, 0x3F	; 63
      aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_copy_data>:
      ac:	18 e2       	ldi	r17, 0x28	; 40
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b8 e2       	ldi	r27, 0x28	; 40
      b2:	e0 ec       	ldi	r30, 0xC0	; 192
      b4:	f3 e1       	ldi	r31, 0x13	; 19
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
      b8:	05 90       	lpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	a2 30       	cpi	r26, 0x02	; 2
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
      c2:	2b e2       	ldi	r18, 0x2B	; 43
      c4:	a2 e0       	ldi	r26, 0x02	; 2
      c6:	b8 e2       	ldi	r27, 0x28	; 40
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a0 37       	cpi	r26, 0x70	; 112
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	0e 94 11 01 	call	0x222	; 0x222 <main>
      d6:	0c 94 80 09 	jmp	0x1300	; 0x1300 <_exit>

000000da <__bad_interrupt>:
      da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <adc_update>:
	uint16_t adcResult;
	
	// Cycle through the ADC pins, taking readings in sequence
	
	// If conversion in progress, return
	if ((ADC0_COMMAND & ADC_STCONV_bm) != 0)
      de:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
      e2:	80 fd       	sbrc	r24, 0
      e4:	2d c0       	rjmp	.+90     	; 0x140 <__EEPROM_REGION_LENGTH__+0x40>
	{
		return;
	}

	// Clear result ready flag from the previous conversion
	ADC0_INTFLAGS = ADC_RESRDY_bm;
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
	
	// Get result from the previous conversion, filter, and store.
	// Use filter equation
	//   newFiltered = 0.75 * prevFiltered + 0.25 * latestConversion
	//               = ((3 * prevFiltered) + latestConversion) / 4
	adcResult = ADC0_RES;
      ec:	40 91 10 06 	lds	r20, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
      f0:	50 91 11 06 	lds	r21, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
	filteredResults[adcChannel] = ((filteredResults[adcChannel] * 3) + adcResult) / 4;
      f4:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <__data_end>
      f8:	e2 2f       	mov	r30, r18
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	ee 0f       	add	r30, r30
      fe:	ff 1f       	adc	r31, r31
     100:	ed 5f       	subi	r30, 0xFD	; 253
     102:	f7 4d       	sbci	r31, 0xD7	; 215
     104:	80 81       	ld	r24, Z
     106:	91 81       	ldd	r25, Z+1	; 0x01
     108:	bc 01       	movw	r22, r24
     10a:	66 0f       	add	r22, r22
     10c:	77 1f       	adc	r23, r23
     10e:	86 0f       	add	r24, r22
     110:	97 1f       	adc	r25, r23
     112:	84 0f       	add	r24, r20
     114:	95 1f       	adc	r25, r21
     116:	96 95       	lsr	r25
     118:	87 95       	ror	r24
     11a:	96 95       	lsr	r25
     11c:	87 95       	ror	r24
     11e:	80 83       	st	Z, r24
     120:	91 83       	std	Z+1, r25	; 0x01
	
	// Increment channel number, wrapping if needed
	++adcChannel;
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	82 0f       	add	r24, r18
     126:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <__data_end>
	if (adcChannel >= NUM_ADC_CHANNELS)
     12a:	8d 30       	cpi	r24, 0x0D	; 13
     12c:	10 f0       	brcs	.+4      	; 0x132 <__EEPROM_REGION_LENGTH__+0x32>
	{
		adcChannel = 0;
     12e:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <__data_end>
	}
	
	// Start next conversion
	ADC0_MUXPOS = adcChannel;
     132:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     136:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
	ADC0_COMMAND = ADC_STCONV_bm;
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
     140:	08 95       	ret

00000142 <adc_read_immediate>:
uint16_t adc_read_immediate(uint8_t channel)
{
	uint16_t adcVoltage;
	
	// Set channel (ADC0-ADC15)
	ADC0_MUXPOS = channel;
     142:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
	// Start conversion
	ADC0_COMMAND = ADC_STCONV_bm;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
	// Wait for conversion to complete
	while((ADC0_INTFLAGS & ADC_RESRDY_bm) == 0);
     14c:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
     150:	80 ff       	sbrs	r24, 0
     152:	fc cf       	rjmp	.-8      	; 0x14c <adc_read_immediate+0xa>
	// Clear result ready flag
	ADC0_INTFLAGS = ADC_RESRDY_bm;
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
	// Read result
	adcVoltage = ADC0_RES;
     15a:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     15e:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
	// Return result
	return adcVoltage;
}
     162:	08 95       	ret

00000164 <adc_init>:
static uint16_t filteredResults[NUM_ADC_CHANNELS];
// Pointer to the channel being converted
static uint8_t adcChannel;

void adc_init(void)
{
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
	// Disable the input buffer, disable pullup, disable
	// inversion for all ADC pins
	PORTD_PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;	// ADC0
     168:	84 e0       	ldi	r24, 0x04	; 4
     16a:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__TEXT_REGION_LENGTH__+0x7f4470>
	PORTD_PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;	// ADC1
     16e:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <__TEXT_REGION_LENGTH__+0x7f4471>
	PORTD_PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;	// ADC2
     172:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <__TEXT_REGION_LENGTH__+0x7f4472>
	PORTD_PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;	// ADC3
     176:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <__TEXT_REGION_LENGTH__+0x7f4473>
	PORTD_PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;	// ADC4
     17a:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <__TEXT_REGION_LENGTH__+0x7f4474>
	PORTD_PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;	// ADC5
     17e:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <__TEXT_REGION_LENGTH__+0x7f4475>
	PORTD_PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;	// ADC6
     182:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <__TEXT_REGION_LENGTH__+0x7f4476>
	PORTD_PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;	// ADC7
     186:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	PORTE_PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;	// ADC8
     18a:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <__TEXT_REGION_LENGTH__+0x7f4490>
	PORTE_PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;	// ADC9
     18e:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <__TEXT_REGION_LENGTH__+0x7f4491>
	PORTE_PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;	// ADC10
     192:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <__TEXT_REGION_LENGTH__+0x7f4492>
	PORTE_PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;	// ADC11
     196:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <__TEXT_REGION_LENGTH__+0x7f4493>
	PORTF_PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;	// ADC12
     19a:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <__TEXT_REGION_LENGTH__+0x7f44b2>
	PORTF_PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;	// ADC13
     19e:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <__TEXT_REGION_LENGTH__+0x7f44b3>
	PORTF_PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;	// ADC14
     1a2:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <__TEXT_REGION_LENGTH__+0x7f44b4>
	PORTF_PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;	// ADC15
     1a6:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <__TEXT_REGION_LENGTH__+0x7f44b5>
	// Accumulate 1 sample
	ADC0_CTRLB = ADC_SAMPNUM_ACC1_gc;
     1aa:	10 92 01 06 	sts	0x0601, r1	; 0x800601 <__TEXT_REGION_LENGTH__+0x7f4601>
	// Use reduced size sampling cap, VDD reference, and 1 MHz ADC clock
	ADC0_CTRLC = ADC_SAMPCAP_bm | ADC_REFSEL_VDDREF_gc | ADC_PRESC_DIV8_gc;
     1ae:	82 e5       	ldi	r24, 0x52	; 82
     1b0:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
	// Delay 32 clocks before first sample after powerup
	ADC0_CTRLD = ADC_INITDLY_DLY32_gc;
     1b4:	80 e4       	ldi	r24, 0x40	; 64
     1b6:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <__TEXT_REGION_LENGTH__+0x7f4603>
	// No window comparator
	ADC0_CTRLE = ADC_WINCM_NONE_gc;
     1ba:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <__TEXT_REGION_LENGTH__+0x7f4604>
	// No additional sampling cycles
	ADC0_SAMPCTRL = 0;
     1be:	10 92 05 06 	sts	0x0605, r1	; 0x800605 <__TEXT_REGION_LENGTH__+0x7f4605>
	// Duty cycle of ADC clock = 25% (required for <= 1.5 MHz clock)
	ADC0_CALIB = ADC_DUTYCYC_DUTY25_gc;
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <__TEXT_REGION_LENGTH__+0x7f4616>
	// Enable ADC
	ADC0_CTRLA = ADC_ENABLE_bm;
     1c8:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
	// Clear result ready flag if set
	ADC0_INTFLAGS = ADC_RESRDY_bm;
     1cc:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
	
	// Loop through all channels, taking the first reading
	for (adcChannel = 0; adcChannel < NUM_ADC_CHANNELS; ++adcChannel)
     1d0:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <__data_end>
     1d4:	0f c0       	rjmp	.+30     	; 0x1f4 <adc_init+0x90>
	{
		filteredResults[adcChannel] = adc_read_immediate(adcChannel);
     1d6:	c8 2f       	mov	r28, r24
     1d8:	d0 e0       	ldi	r29, 0x00	; 0
     1da:	0e 94 a1 00 	call	0x142	; 0x142 <adc_read_immediate>
     1de:	cc 0f       	add	r28, r28
     1e0:	dd 1f       	adc	r29, r29
     1e2:	cd 5f       	subi	r28, 0xFD	; 253
     1e4:	d7 4d       	sbci	r29, 0xD7	; 215
     1e6:	88 83       	st	Y, r24
     1e8:	99 83       	std	Y+1, r25	; 0x01
	ADC0_CTRLA = ADC_ENABLE_bm;
	// Clear result ready flag if set
	ADC0_INTFLAGS = ADC_RESRDY_bm;
	
	// Loop through all channels, taking the first reading
	for (adcChannel = 0; adcChannel < NUM_ADC_CHANNELS; ++adcChannel)
     1ea:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     1ee:	8f 5f       	subi	r24, 0xFF	; 255
     1f0:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <__data_end>
     1f4:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     1f8:	8d 30       	cpi	r24, 0x0D	; 13
     1fa:	68 f3       	brcs	.-38     	; 0x1d6 <adc_init+0x72>
	{
		filteredResults[adcChannel] = adc_read_immediate(adcChannel);
	}
	// Start first conversion for periodic reading
	adcChannel = 0;
     1fc:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <__data_end>
	ADC0_MUXPOS = adcChannel;
     200:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
	ADC0_COMMAND = ADC_STCONV_bm;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
}
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <adc_read_filtered>:
}


uint16_t adc_read_filtered(uint8_t channel)
{
	return filteredResults[channel];
     210:	e8 2f       	mov	r30, r24
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	ee 0f       	add	r30, r30
     216:	ff 1f       	adc	r31, r31
     218:	ed 5f       	subi	r30, 0xFD	; 253
     21a:	f7 4d       	sbci	r31, 0xD7	; 215
}
     21c:	80 81       	ld	r24, Z
     21e:	91 81       	ldd	r25, Z+1	; 0x01
     220:	08 95       	ret

00000222 <main>:
	******************************************************************/
	// Init the clock to EXTCLK, no prescaler
	//	_PROTECTED_WRITE(CLKCTRL_MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc);
	//	_PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, 0);
	// For testing, use internal clock set to 8MHz (note that the FREQSEL fuse must be set to 16MHz)
	_PROTECTED_WRITE(CLKCTRL_MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc);
     222:	88 ed       	ldi	r24, 0xD8	; 216
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	84 bf       	out	0x34, r24	; 52
     228:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f4060>
	_PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm);
     22c:	21 e0       	ldi	r18, 0x01	; 1
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	84 bf       	out	0x34, r24	; 52
     232:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
	
	// Init libraries
	uart_init();
     236:	0e 94 1d 08 	call	0x103a	; 0x103a <uart_init>
	adc_init();
     23a:	0e 94 b2 00 	call	0x164	; 0x164 <adc_init>
	// The following init functions must be called in the correct order
	// so that the servo outputs will be initialized to the correct
	// states (OFF = '0').
	parse_commands_init();		// (1) Init command array to all OFF
     23e:	0e 94 b8 02 	call	0x570	; 0x570 <parse_commands_init>
	servo_calculations_init();	// (2) Convert command array into pulse width array
     242:	0e 94 b8 04 	call	0x970	; 0x970 <servo_calculations_init>
	servo_pulse_init();			// (3) Convert pulse width array into edge array for the ISR
     246:	0e 94 61 07 	call	0xec2	; 0xec2 <servo_pulse_init>

	// Do timer inits last so everything will be set up before first ISR
	timer_init();
     24a:	0e 94 b4 07 	call	0xf68	; 0xf68 <timer_init>
	
	// Turn on global interrupts as last step in inits
	sei();
     24e:	78 94       	sei
	
	// Turn on battery voltage monitor on pin PA2
	PORTA_DIRSET = _BV(2);
     250:	84 e0       	ldi	r24, 0x04	; 4
     252:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7f4401>
	PORTA_OUTTGL = _BV(2);
     256:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <__TEXT_REGION_LENGTH__+0x7f4407>
		// Call unit test function if defined
		#if (UNIT_TEST)
		unit_test_driver();
		#endif
		// Call periodic update functions
		uart_update();
     25a:	0e 94 39 08 	call	0x1072	; 0x1072 <uart_update>
		adc_update();
     25e:	0e 94 6f 00 	call	0xde	; 0xde <adc_update>
		parse_commands_update();
     262:	0e 94 d6 02 	call	0x5ac	; 0x5ac <parse_commands_update>
		servo_calculations_update();
     266:	0e 94 40 03 	call	0x680	; 0x680 <servo_calculations_update>
		servo_pulse_update();
     26a:	0e 94 bb 04 	call	0x976	; 0x976 <servo_pulse_update>
     26e:	f5 cf       	rjmp	.-22     	; 0x25a <main+0x38>

00000270 <ParseServoNum>:
* need/use the argument, depending on whether the command requires
* an argument.
**********************************************************************/
static void ParseServoNum(uint16_t argument)
{
	servoNum = argument;
     270:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     274:	08 95       	ret

00000276 <ParseServoHold>:
}
static void ParseServoHold(uint16_t argument)
{
	// Set current pulse width to target pulse width
	if (servoNum < NUM_SERVOS)
     276:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     27a:	8c 30       	cpi	r24, 0x0C	; 12
     27c:	c8 f4       	brcc	.+50     	; 0x2b0 <ParseServoHold+0x3a>
	{
		ServoPulseDefs[servoNum].currentPW_l16 = (uint32_t)ServoPulseDefs[servoNum].targetPW << 16;
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	fc 01       	movw	r30, r24
     282:	ee 0f       	add	r30, r30
     284:	ff 1f       	adc	r31, r31
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	88 0f       	add	r24, r24
     28c:	99 1f       	adc	r25, r25
     28e:	88 0f       	add	r24, r24
     290:	99 1f       	adc	r25, r25
     292:	e8 0f       	add	r30, r24
     294:	f9 1f       	adc	r31, r25
     296:	eb 50       	subi	r30, 0x0B	; 11
     298:	f7 4d       	sbci	r31, 0xD7	; 215
     29a:	80 81       	ld	r24, Z
     29c:	91 81       	ldd	r25, Z+1	; 0x01
     29e:	a0 e0       	ldi	r26, 0x00	; 0
     2a0:	b0 e0       	ldi	r27, 0x00	; 0
     2a2:	dc 01       	movw	r26, r24
     2a4:	99 27       	eor	r25, r25
     2a6:	88 27       	eor	r24, r24
     2a8:	82 83       	std	Z+2, r24	; 0x02
     2aa:	93 83       	std	Z+3, r25	; 0x03
     2ac:	a4 83       	std	Z+4, r26	; 0x04
     2ae:	b5 83       	std	Z+5, r27	; 0x05
     2b0:	08 95       	ret

000002b2 <ParseServoLimp>:
	}
}
static void ParseServoLimp(uint16_t argument)
{
	// Set pulse width to 0 to indicate solid '0'.
	if (servoNum < NUM_SERVOS)
     2b2:	e0 91 00 28 	lds	r30, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     2b6:	ec 30       	cpi	r30, 0x0C	; 12
     2b8:	70 f4       	brcc	.+28     	; 0x2d6 <ParseServoLimp+0x24>
	{
		ServoCmdArray[servoNum].isCommanded = true;
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	cf 01       	movw	r24, r30
     2be:	88 0f       	add	r24, r24
     2c0:	99 1f       	adc	r25, r25
     2c2:	88 0f       	add	r24, r24
     2c4:	99 1f       	adc	r25, r25
     2c6:	e8 0f       	add	r30, r24
     2c8:	f9 1f       	adc	r31, r25
     2ca:	e7 54       	subi	r30, 0x47	; 71
     2cc:	f7 4d       	sbci	r31, 0xD7	; 215
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	80 83       	st	Z, r24
		ServoCmdArray[servoNum].targetPW = 0;
     2d2:	11 82       	std	Z+1, r1	; 0x01
     2d4:	12 82       	std	Z+2, r1	; 0x02
     2d6:	08 95       	ret

000002d8 <ParseServoPW>:
	}
}
static void ParseServoPW(uint16_t argument)
{
	// Test for valid servo number and PW argument
	if ((servoNum < NUM_SERVOS) && (argument >= MINIMUM_PW) && (argument <= MAXIMUM_PW))
     2d8:	e0 91 00 28 	lds	r30, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     2dc:	ec 30       	cpi	r30, 0x0C	; 12
     2de:	b0 f4       	brcc	.+44     	; 0x30c <ParseServoPW+0x34>
     2e0:	84 3f       	cpi	r24, 0xF4	; 244
     2e2:	21 e0       	ldi	r18, 0x01	; 1
     2e4:	92 07       	cpc	r25, r18
     2e6:	90 f0       	brcs	.+36     	; 0x30c <ParseServoPW+0x34>
     2e8:	85 3c       	cpi	r24, 0xC5	; 197
     2ea:	29 e0       	ldi	r18, 0x09	; 9
     2ec:	92 07       	cpc	r25, r18
     2ee:	70 f4       	brcc	.+28     	; 0x30c <ParseServoPW+0x34>
	{
		// Set pulse width for servo.
		ServoCmdArray[servoNum].isCommanded = true;
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	9f 01       	movw	r18, r30
     2f4:	22 0f       	add	r18, r18
     2f6:	33 1f       	adc	r19, r19
     2f8:	22 0f       	add	r18, r18
     2fa:	33 1f       	adc	r19, r19
     2fc:	e2 0f       	add	r30, r18
     2fe:	f3 1f       	adc	r31, r19
     300:	e7 54       	subi	r30, 0x47	; 71
     302:	f7 4d       	sbci	r31, 0xD7	; 215
     304:	21 e0       	ldi	r18, 0x01	; 1
     306:	20 83       	st	Z, r18
		ServoCmdArray[servoNum].targetPW = argument;
     308:	81 83       	std	Z+1, r24	; 0x01
     30a:	92 83       	std	Z+2, r25	; 0x02
     30c:	08 95       	ret

0000030e <ParseQCurrent>:
	}
}
static void ParseQCurrent(uint16_t argument)
{
     30e:	08 95       	ret

00000310 <ParseServoSpeed>:
	// Write final carriage return
	uart_tx_put_char('\r');
}
static void ParseServoSpeed(uint16_t argument)
{
	if (servoNum < NUM_SERVOS)
     310:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     314:	2c 30       	cpi	r18, 0x0C	; 12
     316:	68 f4       	brcc	.+26     	; 0x332 <ParseServoSpeed+0x22>
	{
		// Set speed for servo.  Do not set the
		// isCommanded to true since the speed by itself
		// does not make a valid command.  Needs PW.
		ServoCmdArray[servoNum].targetSpeed = argument;
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	f9 01       	movw	r30, r18
     31c:	ee 0f       	add	r30, r30
     31e:	ff 1f       	adc	r31, r31
     320:	ee 0f       	add	r30, r30
     322:	ff 1f       	adc	r31, r31
     324:	2e 0f       	add	r18, r30
     326:	3f 1f       	adc	r19, r31
     328:	f9 01       	movw	r30, r18
     32a:	e7 54       	subi	r30, 0x47	; 71
     32c:	f7 4d       	sbci	r31, 0xD7	; 215
     32e:	83 83       	std	Z+3, r24	; 0x03
     330:	94 83       	std	Z+4, r25	; 0x04
     332:	08 95       	ret

00000334 <ParseMoveTime>:
	}
}
static void ParseMoveTime(uint16_t argument)
{
	ServoCmdMoveTime = argument;
     334:	80 93 b3 28 	sts	0x28B3, r24	; 0x8028b3 <ServoCmdMoveTime>
     338:	90 93 b4 28 	sts	0x28B4, r25	; 0x8028b4 <ServoCmdMoveTime+0x1>
     33c:	08 95       	ret

0000033e <parseAlpha>:
		}
	}	
}

static void parseAlpha(uint8_t * token)
{
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	8c 01       	movw	r16, r24
	// Search the table for the token.  Linear search for now, since
	// the table is small.
	for (uint8_t i = 0; ParseTable[i].pCmdstr != NULL; ++i)
     34a:	f1 2c       	mov	r15, r1
     34c:	1e c0       	rjmp	.+60     	; 0x38a <parseAlpha+0x4c>
	{
		if (strcmp((const char *)ParseTable[i].pCmdstr,(const char *)token) == 0)
     34e:	b8 01       	movw	r22, r16
     350:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <strcmp>
     354:	89 2b       	or	r24, r25
     356:	c1 f4       	brne	.+48     	; 0x388 <parseAlpha+0x4a>
		{
			// If token found, then save the function for later use.
			// Also save the flag indicating whether an argument is required.
			pCmdFunc = ParseTable[i].pFunction;
     358:	ce 01       	movw	r24, r28
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	c8 0f       	add	r28, r24
     364:	d9 1f       	adc	r29, r25
     366:	cc 57       	subi	r28, 0x7C	; 124
     368:	dc 4a       	sbci	r29, 0xAC	; 172
     36a:	ea 81       	ldd	r30, Y+2	; 0x02
     36c:	fb 81       	ldd	r31, Y+3	; 0x03
     36e:	e0 93 27 28 	sts	0x2827, r30	; 0x802827 <pCmdFunc>
     372:	f0 93 28 28 	sts	0x2828, r31	; 0x802828 <pCmdFunc+0x1>
			argumentRequired = ParseTable[i].argumentRequired;
     376:	8c 81       	ldd	r24, Y+4	; 0x04
     378:	80 93 26 28 	sts	0x2826, r24	; 0x802826 <argumentRequired>
			// If no argument is required, then call the function now.
			if (!ParseTable[i].argumentRequired)
     37c:	81 11       	cpse	r24, r1
     37e:	14 c0       	rjmp	.+40     	; 0x3a8 <parseAlpha+0x6a>
			{
				pCmdFunc(0);	// Dummy argument
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	09 95       	icall
     386:	10 c0       	rjmp	.+32     	; 0x3a8 <parseAlpha+0x6a>

static void parseAlpha(uint8_t * token)
{
	// Search the table for the token.  Linear search for now, since
	// the table is small.
	for (uint8_t i = 0; ParseTable[i].pCmdstr != NULL; ++i)
     388:	f3 94       	inc	r15
     38a:	cf 2d       	mov	r28, r15
     38c:	d0 e0       	ldi	r29, 0x00	; 0
     38e:	fe 01       	movw	r30, r28
     390:	ee 0f       	add	r30, r30
     392:	ff 1f       	adc	r31, r31
     394:	ee 0f       	add	r30, r30
     396:	ff 1f       	adc	r31, r31
     398:	ec 0f       	add	r30, r28
     39a:	fd 1f       	adc	r31, r29
     39c:	ec 57       	subi	r30, 0x7C	; 124
     39e:	fc 4a       	sbci	r31, 0xAC	; 172
     3a0:	80 81       	ld	r24, Z
     3a2:	91 81       	ldd	r25, Z+1	; 0x01
     3a4:	00 97       	sbiw	r24, 0x00	; 0
     3a6:	99 f6       	brne	.-90     	; 0x34e <parseAlpha+0x10>
				pCmdFunc(0);	// Dummy argument
			}
			break;	// No need to continue search
		}
	}
}
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	ff 90       	pop	r15
     3b2:	08 95       	ret

000003b4 <ParseVer>:
{
	ServoCmdMoveTime = argument;
}
static void ParseVer(uint16_t argument)
{
	uart_tx_string(VERSION);
     3b4:	88 e5       	ldi	r24, 0x58	; 88
     3b6:	93 e5       	ldi	r25, 0x53	; 83
     3b8:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_tx_string>
     3bc:	08 95       	ret

000003be <ParseQStatus>:
	// - 1 = Limp (output to servo is logic '0')
	// - 4 = Traveling (moving at a stable speed)
	// - 6 = Holding (keeping current position)
	// These values are a subset of the status values supported by the LSS protocol
	
	if (servoNum < NUM_SERVOS)
     3be:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     3c2:	8c 30       	cpi	r24, 0x0C	; 12
     3c4:	08 f0       	brcs	.+2      	; 0x3c8 <ParseQStatus+0xa>
     3c6:	67 c0       	rjmp	.+206    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
	{
		// Write "*NQ", where N = servo number
		uart_tx_put_char('*');
     3c8:	8a e2       	ldi	r24, 0x2A	; 42
     3ca:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
		if (servoNum >= 10)
     3ce:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     3d2:	8a 30       	cpi	r24, 0x0A	; 10
     3d4:	50 f0       	brcs	.+20     	; 0x3ea <ParseQStatus+0x2c>
		{
			uart_tx_put_char((servoNum / 10) + '0');	// Tens digit;
     3d6:	9d ec       	ldi	r25, 0xCD	; 205
     3d8:	89 9f       	mul	r24, r25
     3da:	81 2d       	mov	r24, r1
     3dc:	11 24       	eor	r1, r1
     3de:	86 95       	lsr	r24
     3e0:	86 95       	lsr	r24
     3e2:	86 95       	lsr	r24
     3e4:	80 5d       	subi	r24, 0xD0	; 208
     3e6:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
		}
		uart_tx_put_char((servoNum % 10) + '0');		// Ones digit;
     3ea:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     3ee:	9d ec       	ldi	r25, 0xCD	; 205
     3f0:	89 9f       	mul	r24, r25
     3f2:	91 2d       	mov	r25, r1
     3f4:	11 24       	eor	r1, r1
     3f6:	96 95       	lsr	r25
     3f8:	96 95       	lsr	r25
     3fa:	96 95       	lsr	r25
     3fc:	99 0f       	add	r25, r25
     3fe:	29 2f       	mov	r18, r25
     400:	22 0f       	add	r18, r18
     402:	22 0f       	add	r18, r18
     404:	92 0f       	add	r25, r18
     406:	89 1b       	sub	r24, r25
     408:	80 5d       	subi	r24, 0xD0	; 208
     40a:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
		uart_tx_put_char('Q');
     40e:	81 e5       	ldi	r24, 0x51	; 81
     410:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
		// Write the code corresponding to the servo status
		if (ServoPulseDefs[servoNum].currentPW_l16 == 0)
     414:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	fc 01       	movw	r30, r24
     41c:	ee 0f       	add	r30, r30
     41e:	ff 1f       	adc	r31, r31
     420:	9c 01       	movw	r18, r24
     422:	22 0f       	add	r18, r18
     424:	33 1f       	adc	r19, r19
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	22 0f       	add	r18, r18
     42c:	33 1f       	adc	r19, r19
     42e:	e2 0f       	add	r30, r18
     430:	f3 1f       	adc	r31, r19
     432:	eb 50       	subi	r30, 0x0B	; 11
     434:	f7 4d       	sbci	r31, 0xD7	; 215
     436:	42 81       	ldd	r20, Z+2	; 0x02
     438:	53 81       	ldd	r21, Z+3	; 0x03
     43a:	64 81       	ldd	r22, Z+4	; 0x04
     43c:	75 81       	ldd	r23, Z+5	; 0x05
     43e:	41 15       	cp	r20, r1
     440:	51 05       	cpc	r21, r1
     442:	61 05       	cpc	r22, r1
     444:	71 05       	cpc	r23, r1
     446:	21 f4       	brne	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		{
			// PW of 0 indicates no pulse (output constant '0')
			uart_tx_put_char('1');
     448:	81 e3       	ldi	r24, 0x31	; 49
     44a:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
     44e:	20 c0       	rjmp	.+64     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		}
		else if (ServoPulseDefs[servoNum].currentPW_l16 != ((uint32_t)ServoPulseDefs[servoNum].targetPW << 16))
     450:	fc 01       	movw	r30, r24
     452:	ee 0f       	add	r30, r30
     454:	ff 1f       	adc	r31, r31
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	e8 0f       	add	r30, r24
     464:	f9 1f       	adc	r31, r25
     466:	eb 50       	subi	r30, 0x0B	; 11
     468:	f7 4d       	sbci	r31, 0xD7	; 215
     46a:	80 81       	ld	r24, Z
     46c:	91 81       	ldd	r25, Z+1	; 0x01
     46e:	a0 e0       	ldi	r26, 0x00	; 0
     470:	b0 e0       	ldi	r27, 0x00	; 0
     472:	dc 01       	movw	r26, r24
     474:	99 27       	eor	r25, r25
     476:	88 27       	eor	r24, r24
     478:	48 17       	cp	r20, r24
     47a:	59 07       	cpc	r21, r25
     47c:	6a 07       	cpc	r22, r26
     47e:	7b 07       	cpc	r23, r27
     480:	21 f0       	breq	.+8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
		{
			// Current PW not equal to target PW indicates servo moving
			uart_tx_put_char('4');
     482:	84 e3       	ldi	r24, 0x34	; 52
     484:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
     488:	03 c0       	rjmp	.+6      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		}
		else
		{
			// Otherwise servo holding
			uart_tx_put_char('6');
     48a:	86 e3       	ldi	r24, 0x36	; 54
     48c:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
		}
		// Write final carriage return
		uart_tx_put_char('\r');
     490:	8d e0       	ldi	r24, 0x0D	; 13
     492:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
     496:	08 95       	ret

00000498 <ParseQVoltage>:
	}
}
static void ParseQVoltage(uint16_t argument)
{
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
	// Return a string with battery voltage in millivolts
	uint16_t adcResult;
	
	// The ADC channel for battery voltage is 12
	adcResult = adc_read_filtered(12);
     49c:	8c e0       	ldi	r24, 0x0C	; 12
     49e:	0e 94 08 01 	call	0x210	; 0x210 <adc_read_filtered>
     4a2:	ec 01       	movw	r28, r24
	// Write "*QV"
	uart_tx_put_char('*');
     4a4:	8a e2       	ldi	r24, 0x2A	; 42
     4a6:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
	uart_tx_put_char('Q');
     4aa:	81 e5       	ldi	r24, 0x51	; 81
     4ac:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
	uart_tx_put_char('V');
     4b0:	86 e5       	ldi	r24, 0x56	; 86
     4b2:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
	// Convert to voltage at pin in mV.  ADC of 1024 corresponds
	// to a battery voltage of 12639mV.
	// 808896 = (12639/1024) * 65536
	uint32_t voltageMilliVolts = (uint32_t)adcResult * 808896UL / 65536UL;
     4b6:	de 01       	movw	r26, r28
     4b8:	20 ec       	ldi	r18, 0xC0	; 192
     4ba:	37 e5       	ldi	r19, 0x57	; 87
     4bc:	4c e0       	ldi	r20, 0x0C	; 12
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	0e 94 26 09 	call	0x124c	; 0x124c <__muluhisi3>
	// Write voltage in millivolts.
	uart_tx_uint16(voltageMilliVolts);
     4c4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <uart_tx_uint16>
	// Write final carriage return
	uart_tx_put_char('\r');
     4c8:	8d e0       	ldi	r24, 0x0D	; 13
     4ca:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
}
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <ParseQPos>:
static void ParseQCurrent(uint16_t argument)
{
	
}
static void ParseQPos(uint16_t argument)
{
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
	// Return a string with position feedback voltage in millivolts
	uint16_t adcResult;

	if (servoNum < NUM_SERVOS)
     4d8:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     4dc:	8c 30       	cpi	r24, 0x0C	; 12
     4de:	c0 f5       	brcc	.+112    	; 0x550 <ParseQPos+0x7c>
	{
		// The ADC channel number matches the servo number, so no
		// conversion required.
		adcResult = adc_read_filtered(servoNum);
     4e0:	0e 94 08 01 	call	0x210	; 0x210 <adc_read_filtered>
     4e4:	ec 01       	movw	r28, r24
		// Write "*NQP", where N = servo number
		uart_tx_put_char('*');
     4e6:	8a e2       	ldi	r24, 0x2A	; 42
     4e8:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
		if (servoNum >= 10)
     4ec:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     4f0:	8a 30       	cpi	r24, 0x0A	; 10
     4f2:	50 f0       	brcs	.+20     	; 0x508 <ParseQPos+0x34>
		{
			uart_tx_put_char((servoNum / 10) + '0');	// Tens digit;
     4f4:	9d ec       	ldi	r25, 0xCD	; 205
     4f6:	89 9f       	mul	r24, r25
     4f8:	81 2d       	mov	r24, r1
     4fa:	11 24       	eor	r1, r1
     4fc:	86 95       	lsr	r24
     4fe:	86 95       	lsr	r24
     500:	86 95       	lsr	r24
     502:	80 5d       	subi	r24, 0xD0	; 208
     504:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
		}
		uart_tx_put_char((servoNum % 10) + '0');		// Ones digit;
     508:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     50c:	9d ec       	ldi	r25, 0xCD	; 205
     50e:	89 9f       	mul	r24, r25
     510:	91 2d       	mov	r25, r1
     512:	11 24       	eor	r1, r1
     514:	96 95       	lsr	r25
     516:	96 95       	lsr	r25
     518:	96 95       	lsr	r25
     51a:	99 0f       	add	r25, r25
     51c:	29 2f       	mov	r18, r25
     51e:	22 0f       	add	r18, r18
     520:	22 0f       	add	r18, r18
     522:	92 0f       	add	r25, r18
     524:	89 1b       	sub	r24, r25
     526:	80 5d       	subi	r24, 0xD0	; 208
     528:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
		uart_tx_put_char('Q');
     52c:	81 e5       	ldi	r24, 0x51	; 81
     52e:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
		uart_tx_put_char('P');
     532:	80 e5       	ldi	r24, 0x50	; 80
     534:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
		// Convert to voltage at pin in mV.  ADC of 1024 corresponds
		// to the supply voltage of 3.3V = 3300 mV.
		// 211200 = (3300/1024) * 65536
		uint32_t voltageMilliVolts = (uint32_t)adcResult * 211200UL / 65536UL;
     538:	de 01       	movw	r26, r28
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	39 e3       	ldi	r19, 0x39	; 57
     53e:	43 e0       	ldi	r20, 0x03	; 3
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	0e 94 26 09 	call	0x124c	; 0x124c <__muluhisi3>
		// Write voltage in millivolts.
		uart_tx_uint16(voltageMilliVolts);
     546:	0e 94 7f 08 	call	0x10fe	; 0x10fe <uart_tx_uint16>
		// Write final carriage return
		uart_tx_put_char('\r');
     54a:	8d e0       	ldi	r24, 0x0D	; 13
     54c:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
	}
}
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <parseNumber>:

static void parseNumber(uint8_t * token)
{
	// Convert the token to integer and pass to the parsing
	// function for the command.
	uint16_t arg = atoi((const char *)token);
     556:	0e 94 3d 09 	call	0x127a	; 0x127a <atoi>
	// Call the function if valid and if an argument is required.
	// (If an argument is not required, then the function was already called.)
	if ((pCmdFunc != NULL) && argumentRequired)
     55a:	e0 91 27 28 	lds	r30, 0x2827	; 0x802827 <pCmdFunc>
     55e:	f0 91 28 28 	lds	r31, 0x2828	; 0x802828 <pCmdFunc+0x1>
     562:	30 97       	sbiw	r30, 0x00	; 0
     564:	21 f0       	breq	.+8      	; 0x56e <parseNumber+0x18>
     566:	20 91 26 28 	lds	r18, 0x2826	; 0x802826 <argumentRequired>
     56a:	21 11       	cpse	r18, r1
	{
		pCmdFunc(arg);
     56c:	09 95       	icall
     56e:	08 95       	ret

00000570 <parse_commands_init>:
**********************************************************************/
void parse_commands_init(void)
{
	// Reset the command array to turn all servos off (output '0').
	// Set all servos to PW = 0 (servo OFF).
	for (uint8_t servoNum = 0; servoNum < NUM_SERVOS; ++servoNum)
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	12 c0       	rjmp	.+36     	; 0x598 <parse_commands_init+0x28>
	{
		ServoCmdArray[servoNum].isCommanded = true;
     574:	e8 2f       	mov	r30, r24
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	9f 01       	movw	r18, r30
     57a:	22 0f       	add	r18, r18
     57c:	33 1f       	adc	r19, r19
     57e:	22 0f       	add	r18, r18
     580:	33 1f       	adc	r19, r19
     582:	e2 0f       	add	r30, r18
     584:	f3 1f       	adc	r31, r19
     586:	e7 54       	subi	r30, 0x47	; 71
     588:	f7 4d       	sbci	r31, 0xD7	; 215
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	90 83       	st	Z, r25
		ServoCmdArray[servoNum].targetPW = 0;
     58e:	11 82       	std	Z+1, r1	; 0x01
     590:	12 82       	std	Z+2, r1	; 0x02
		ServoCmdArray[servoNum].targetSpeed = 0;
     592:	13 82       	std	Z+3, r1	; 0x03
     594:	14 82       	std	Z+4, r1	; 0x04
**********************************************************************/
void parse_commands_init(void)
{
	// Reset the command array to turn all servos off (output '0').
	// Set all servos to PW = 0 (servo OFF).
	for (uint8_t servoNum = 0; servoNum < NUM_SERVOS; ++servoNum)
     596:	8f 5f       	subi	r24, 0xFF	; 255
     598:	8c 30       	cpi	r24, 0x0C	; 12
     59a:	60 f3       	brcs	.-40     	; 0x574 <parse_commands_init+0x4>
	{
		ServoCmdArray[servoNum].isCommanded = true;
		ServoCmdArray[servoNum].targetPW = 0;
		ServoCmdArray[servoNum].targetSpeed = 0;
	}
	ServoCmdMoveTime = 0;
     59c:	10 92 b3 28 	sts	0x28B3, r1	; 0x8028b3 <ServoCmdMoveTime>
     5a0:	10 92 b4 28 	sts	0x28B4, r1	; 0x8028b4 <ServoCmdMoveTime+0x1>
	ServoCmdWaiting = true;		// Trigger calculations
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	80 93 32 28 	sts	0x2832, r24	; 0x802832 <ServoCmdWaiting>
     5aa:	08 95       	ret

000005ac <parse_commands_update>:
* Parses command strings using the SSC-32 format.
* Input: RX bytes from UART
* Outputs: TX bytes to UART, ServoCmdArray[], ServoCmdMoveTime, ServoCmdWaiting
**********************************************************************/
void parse_commands_update(void)
{
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	1f 92       	push	r1
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
	uint8_t charType;	// Space, digit, or alpha/punctuation

	// Loop until no characters in the RX queue or a complete command
	// is parsed.  Read bytes from the serial port and collect into a "token".
	// When a token is complete, then look it up and call the handler.
	while (!ServoCmdWaiting)
     5bc:	55 c0       	rjmp	.+170    	; 0x668 <parse_commands_update+0xbc>
	{
		uint8_t ch;
		bool charReturned = uart_rx_get_char(&ch);
     5be:	ce 01       	movw	r24, r28
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	0e 94 3a 08 	call	0x1074	; 0x1074 <uart_rx_get_char>
		if (!charReturned) break;	// Nothing in queue? Quit loop
     5c6:	88 23       	and	r24, r24
     5c8:	09 f4       	brne	.+2      	; 0x5cc <parse_commands_update+0x20>
     5ca:	53 c0       	rjmp	.+166    	; 0x672 <parse_commands_update+0xc6>
		
		// At this point, we have a character from the queue.
		// Determine which type of character it is.
		if (isspace(ch))
     5cc:	19 81       	ldd	r17, Y+1	; 0x01
     5ce:	e1 2e       	mov	r14, r17
     5d0:	f1 2c       	mov	r15, r1
     5d2:	c7 01       	movw	r24, r14
     5d4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <isspace>
     5d8:	89 2b       	or	r24, r25
     5da:	51 f4       	brne	.+20     	; 0x5f0 <parse_commands_update+0x44>
		{
			charType = CHAR_TYPE_WHITESPACE;
		}
		else if (isdigit(ch))
     5dc:	c7 01       	movw	r24, r14
     5de:	c0 97       	sbiw	r24, 0x30	; 48
     5e0:	0a 97       	sbiw	r24, 0x0a	; 10
     5e2:	40 f0       	brcs	.+16     	; 0x5f4 <parse_commands_update+0x48>
			charType = CHAR_TYPE_DIGIT;
		}
		else
		{
			charType = CHAR_TYPE_ALPHAPUNC;
			ch = toupper(ch);
     5e4:	c7 01       	movw	r24, r14
     5e6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <toupper>
     5ea:	89 83       	std	Y+1, r24	; 0x01
		{
			charType = CHAR_TYPE_DIGIT;
		}
		else
		{
			charType = CHAR_TYPE_ALPHAPUNC;
     5ec:	12 e0       	ldi	r17, 0x02	; 2
     5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <parse_commands_update+0x4a>
		
		// At this point, we have a character from the queue.
		// Determine which type of character it is.
		if (isspace(ch))
		{
			charType = CHAR_TYPE_WHITESPACE;
     5f0:	10 e0       	ldi	r17, 0x00	; 0
     5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <parse_commands_update+0x4a>
		}
		else if (isdigit(ch))
		{
			charType = CHAR_TYPE_DIGIT;
     5f4:	11 e0       	ldi	r17, 0x01	; 1
			charType = CHAR_TYPE_ALPHAPUNC;
			ch = toupper(ch);
		}
		
		// Is it the same character type as the last character?
		if (charType != prevCharType)
     5f6:	80 91 25 28 	lds	r24, 0x2825	; 0x802825 <prevCharType.3343>
     5fa:	18 17       	cp	r17, r24
     5fc:	b9 f0       	breq	.+46     	; 0x62c <parse_commands_update+0x80>
		{
			// Add zero to end of token for ASCIIZ string
			token[tokenIdx] = 0;
     5fe:	e0 91 24 28 	lds	r30, 0x2824	; 0x802824 <tokenIdx.3344>
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	e3 5e       	subi	r30, 0xE3	; 227
     606:	f7 4d       	sbci	r31, 0xD7	; 215
     608:	10 82       	st	Z, r1
			// Change in character type.  Process token.
			switch (prevCharType)
     60a:	81 30       	cpi	r24, 0x01	; 1
     60c:	39 f0       	breq	.+14     	; 0x61c <parse_commands_update+0x70>
     60e:	82 30       	cpi	r24, 0x02	; 2
     610:	49 f4       	brne	.+18     	; 0x624 <parse_commands_update+0x78>
			{
				case CHAR_TYPE_ALPHAPUNC:
					// Token is alpha or punctuation
					parseAlpha(token);
     612:	8d e1       	ldi	r24, 0x1D	; 29
     614:	98 e2       	ldi	r25, 0x28	; 40
     616:	0e 94 9f 01 	call	0x33e	; 0x33e <parseAlpha>
					break;
     61a:	04 c0       	rjmp	.+8      	; 0x624 <parse_commands_update+0x78>
				case CHAR_TYPE_DIGIT:
					// Token is a number
					parseNumber(token);
     61c:	8d e1       	ldi	r24, 0x1D	; 29
     61e:	98 e2       	ldi	r25, 0x28	; 40
     620:	0e 94 ab 02 	call	0x556	; 0x556 <parseNumber>
					break;
				// Otherwise must be white space; do nothing
			}
			tokenIdx = 0;	// Start new token
     624:	10 92 24 28 	sts	0x2824, r1	; 0x802824 <tokenIdx.3344>
			prevCharType = charType;
     628:	10 93 25 28 	sts	0x2825, r17	; 0x802825 <prevCharType.3343>
		}

		// If not whitespace and there is space, then add to token
		if ((charType != CHAR_TYPE_WHITESPACE) && (tokenIdx < MAX_TOKEN_NBYTES))
     62c:	11 23       	and	r17, r17
     62e:	69 f0       	breq	.+26     	; 0x64a <parse_commands_update+0x9e>
     630:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <tokenIdx.3344>
     634:	86 30       	cpi	r24, 0x06	; 6
     636:	48 f4       	brcc	.+18     	; 0x64a <parse_commands_update+0x9e>
		{
			token[tokenIdx] = ch;
     638:	e8 2f       	mov	r30, r24
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	e3 5e       	subi	r30, 0xE3	; 227
     63e:	f7 4d       	sbci	r31, 0xD7	; 215
     640:	99 81       	ldd	r25, Y+1	; 0x01
     642:	90 83       	st	Z, r25
			++tokenIdx;
     644:	8f 5f       	subi	r24, 0xFF	; 255
     646:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <tokenIdx.3344>
		}
		
		// Special handling for carriage return.
		if (ch == 0x0D)
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	8d 30       	cpi	r24, 0x0D	; 13
     64e:	61 f4       	brne	.+24     	; 0x668 <parse_commands_update+0xbc>
		{
			// After carriage return, set the flag indicating that there is
			// a command to process.
			ServoCmdWaiting = true;
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	80 93 32 28 	sts	0x2832, r24	; 0x802832 <ServoCmdWaiting>
			// Now reset the internal variables used for parsing commands
			// in prepration for parsing the next command.
			pCmdFunc = NULL;
     656:	10 92 27 28 	sts	0x2827, r1	; 0x802827 <pCmdFunc>
     65a:	10 92 28 28 	sts	0x2828, r1	; 0x802828 <pCmdFunc+0x1>
			servoNum = 255;			// Invalid servo number
     65e:	8f ef       	ldi	r24, 0xFF	; 255
     660:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
			argumentRequired = false;
     664:	10 92 26 28 	sts	0x2826, r1	; 0x802826 <argumentRequired>
	uint8_t charType;	// Space, digit, or alpha/punctuation

	// Loop until no characters in the RX queue or a complete command
	// is parsed.  Read bytes from the serial port and collect into a "token".
	// When a token is complete, then look it up and call the handler.
	while (!ServoCmdWaiting)
     668:	80 91 32 28 	lds	r24, 0x2832	; 0x802832 <ServoCmdWaiting>
     66c:	88 23       	and	r24, r24
     66e:	09 f4       	brne	.+2      	; 0x672 <parse_commands_update+0xc6>
     670:	a6 cf       	rjmp	.-180    	; 0x5be <parse_commands_update+0x12>
			pCmdFunc = NULL;
			servoNum = 255;			// Invalid servo number
			argumentRequired = false;
		}
	}	
}
     672:	0f 90       	pop	r0
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	08 95       	ret

00000680 <servo_calculations_update>:
* If there is a command waiting to be processed, then process it.
* Inputs: ServoCmdArray, ServoCmdMoveTime, ServoCmdWaiting, ServoPulseDefs
* Output: ServoCmdWaiting, ServoPulseDefs
**********************************************************************/
void servo_calculations_update(void)
{
     680:	8f 92       	push	r8
     682:	9f 92       	push	r9
     684:	af 92       	push	r10
     686:	bf 92       	push	r11
     688:	ef 92       	push	r14
     68a:	ff 92       	push	r15
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
	// If there is no command waiting, then leave
	if (!ServoCmdWaiting)
     692:	80 91 32 28 	lds	r24, 0x2832	; 0x802832 <ServoCmdWaiting>
     696:	88 23       	and	r24, r24
     698:	09 f4       	brne	.+2      	; 0x69c <servo_calculations_update+0x1c>
     69a:	60 c1       	rjmp	.+704    	; 0x95c <servo_calculations_update+0x2dc>
	{
		return;
	}
	
	// Clear the flag
	ServoCmdWaiting = false;
     69c:	10 92 32 28 	sts	0x2832, r1	; 0x802832 <ServoCmdWaiting>
	
	// Find the total move time.  This is based on the commanded total
	// and the move time calculated for each servo based on the speed
	// and the change in pulse width.  The final move time will be
	// the MAXIMUM of all the times specified in the command.
	uint16_t moveTime_ms = ServoCmdMoveTime;	// Start with commanded time in milliseconds
     6a0:	c0 91 b3 28 	lds	r28, 0x28B3	; 0x8028b3 <ServoCmdMoveTime>
     6a4:	d0 91 b4 28 	lds	r29, 0x28B4	; 0x8028b4 <ServoCmdMoveTime+0x1>
	for (uint8_t servoNum = 0; servoNum < NUM_SERVOS; ++servoNum)
     6a8:	10 e0       	ldi	r17, 0x00	; 0
     6aa:	92 c0       	rjmp	.+292    	; 0x7d0 <servo_calculations_update+0x150>
	{
		uint32_t servoMoveTime;
		int16_t servoPwDelta;
		
		// If this servo is not part of the command, then skip
		if (!ServoCmdArray[servoNum].isCommanded)
     6ac:	41 2f       	mov	r20, r17
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	fa 01       	movw	r30, r20
     6b2:	ee 0f       	add	r30, r30
     6b4:	ff 1f       	adc	r31, r31
     6b6:	ee 0f       	add	r30, r30
     6b8:	ff 1f       	adc	r31, r31
     6ba:	e4 0f       	add	r30, r20
     6bc:	f5 1f       	adc	r31, r21
     6be:	e7 54       	subi	r30, 0x47	; 71
     6c0:	f7 4d       	sbci	r31, 0xD7	; 215
     6c2:	80 81       	ld	r24, Z
     6c4:	88 23       	and	r24, r24
     6c6:	09 f4       	brne	.+2      	; 0x6ca <servo_calculations_update+0x4a>
     6c8:	82 c0       	rjmp	.+260    	; 0x7ce <servo_calculations_update+0x14e>
		// calculations.
		// If this servo is currently at '0' or '1', then skip.  Timed move
		// does not make sense when going from solid '0' or '1' to a pulse
		// width, so don't take this into account for move time calculation.
		//  '0' and '1' are indicated by pulse widths of 0 and 0xFFFF.
		if ((ServoCmdArray[servoNum].targetPW == 0) || (ServoCmdArray[servoNum].targetPW == 0xFFFF)
     6ca:	fa 01       	movw	r30, r20
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	e4 0f       	add	r30, r20
     6d6:	f5 1f       	adc	r31, r21
     6d8:	e7 54       	subi	r30, 0x47	; 71
     6da:	f7 4d       	sbci	r31, 0xD7	; 215
     6dc:	21 81       	ldd	r18, Z+1	; 0x01
     6de:	32 81       	ldd	r19, Z+2	; 0x02
     6e0:	c9 01       	movw	r24, r18
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	8e 3f       	cpi	r24, 0xFE	; 254
     6e6:	9f 4f       	sbci	r25, 0xFF	; 255
     6e8:	08 f0       	brcs	.+2      	; 0x6ec <servo_calculations_update+0x6c>
     6ea:	71 c0       	rjmp	.+226    	; 0x7ce <servo_calculations_update+0x14e>
			|| (ServoPulseDefs[servoNum].targetPW == 0) || (ServoPulseDefs[servoNum].targetPW == 0xFFFF))
     6ec:	ca 01       	movw	r24, r20
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	88 0f       	add	r24, r24
     6f4:	99 1f       	adc	r25, r25
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	fa 01       	movw	r30, r20
     6fc:	ee 0f       	add	r30, r30
     6fe:	ff 1f       	adc	r31, r31
     700:	e8 0f       	add	r30, r24
     702:	f9 1f       	adc	r31, r25
     704:	eb 50       	subi	r30, 0x0B	; 11
     706:	f7 4d       	sbci	r31, 0xD7	; 215
     708:	80 81       	ld	r24, Z
     70a:	91 81       	ldd	r25, Z+1	; 0x01
     70c:	00 97       	sbiw	r24, 0x00	; 0
     70e:	09 f4       	brne	.+2      	; 0x712 <servo_calculations_update+0x92>
     710:	5e c0       	rjmp	.+188    	; 0x7ce <servo_calculations_update+0x14e>
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	09 f4       	brne	.+2      	; 0x718 <servo_calculations_update+0x98>
     716:	5b c0       	rjmp	.+182    	; 0x7ce <servo_calculations_update+0x14e>
			continue;
		
		// Calculate the magnitude of the change in pulse width in microseconds
		servoPwDelta = ServoCmdArray[servoNum].targetPW - (uint16_t)(ServoPulseDefs[servoNum].currentPW_l16 >> 16);
     718:	ca 01       	movw	r24, r20
     71a:	88 0f       	add	r24, r24
     71c:	99 1f       	adc	r25, r25
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	88 0f       	add	r24, r24
     724:	99 1f       	adc	r25, r25
     726:	fa 01       	movw	r30, r20
     728:	ee 0f       	add	r30, r30
     72a:	ff 1f       	adc	r31, r31
     72c:	e8 0f       	add	r30, r24
     72e:	f9 1f       	adc	r31, r25
     730:	eb 50       	subi	r30, 0x0B	; 11
     732:	f7 4d       	sbci	r31, 0xD7	; 215
     734:	82 81       	ldd	r24, Z+2	; 0x02
     736:	93 81       	ldd	r25, Z+3	; 0x03
     738:	a4 81       	ldd	r26, Z+4	; 0x04
     73a:	b5 81       	ldd	r27, Z+5	; 0x05
     73c:	2a 1b       	sub	r18, r26
     73e:	3b 0b       	sbc	r19, r27
     740:	d9 01       	movw	r26, r18
		if (servoPwDelta < 0)
     742:	bb 23       	and	r27, r27
     744:	24 f4       	brge	.+8      	; 0x74e <servo_calculations_update+0xce>
			servoPwDelta = -servoPwDelta;
     746:	aa 27       	eor	r26, r26
     748:	bb 27       	eor	r27, r27
     74a:	a2 1b       	sub	r26, r18
     74c:	b3 0b       	sbc	r27, r19
		// Calculate the move time for this servo in milliseconds
		if (ServoCmdArray[servoNum].targetSpeed == 0)	// Prevent divide by 0
     74e:	fa 01       	movw	r30, r20
     750:	ee 0f       	add	r30, r30
     752:	ff 1f       	adc	r31, r31
     754:	ee 0f       	add	r30, r30
     756:	ff 1f       	adc	r31, r31
     758:	e4 0f       	add	r30, r20
     75a:	f5 1f       	adc	r31, r21
     75c:	e7 54       	subi	r30, 0x47	; 71
     75e:	f7 4d       	sbci	r31, 0xD7	; 215
     760:	83 81       	ldd	r24, Z+3	; 0x03
     762:	94 81       	ldd	r25, Z+4	; 0x04
     764:	89 2b       	or	r24, r25
     766:	69 f4       	brne	.+26     	; 0x782 <servo_calculations_update+0x102>
			ServoCmdArray[servoNum].targetSpeed = 1;
     768:	fa 01       	movw	r30, r20
     76a:	ee 0f       	add	r30, r30
     76c:	ff 1f       	adc	r31, r31
     76e:	ee 0f       	add	r30, r30
     770:	ff 1f       	adc	r31, r31
     772:	e4 0f       	add	r30, r20
     774:	f5 1f       	adc	r31, r21
     776:	e7 54       	subi	r30, 0x47	; 71
     778:	f7 4d       	sbci	r31, 0xD7	; 215
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	83 83       	std	Z+3, r24	; 0x03
     780:	94 83       	std	Z+4, r25	; 0x04
		servoMoveTime = (1000UL * servoPwDelta) / ServoCmdArray[servoNum].targetSpeed;
     782:	28 ee       	ldi	r18, 0xE8	; 232
     784:	33 e0       	ldi	r19, 0x03	; 3
     786:	0e 94 1f 09 	call	0x123e	; 0x123e <__usmulhisi3>
     78a:	fa 01       	movw	r30, r20
     78c:	ee 0f       	add	r30, r30
     78e:	ff 1f       	adc	r31, r31
     790:	ee 0f       	add	r30, r30
     792:	ff 1f       	adc	r31, r31
     794:	e4 0f       	add	r30, r20
     796:	f5 1f       	adc	r31, r21
     798:	e7 54       	subi	r30, 0x47	; 71
     79a:	f7 4d       	sbci	r31, 0xD7	; 215
     79c:	23 81       	ldd	r18, Z+3	; 0x03
     79e:	34 81       	ldd	r19, Z+4	; 0x04
     7a0:	40 e0       	ldi	r20, 0x00	; 0
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	0e 94 cf 08 	call	0x119e	; 0x119e <__udivmodsi4>
		if (servoMoveTime > 0xFFFF)		// Clip to 16 bits
     7a8:	21 15       	cp	r18, r1
     7aa:	31 05       	cpc	r19, r1
     7ac:	f1 e0       	ldi	r31, 0x01	; 1
     7ae:	4f 07       	cpc	r20, r31
     7b0:	51 05       	cpc	r21, r1
     7b2:	20 f0       	brcs	.+8      	; 0x7bc <servo_calculations_update+0x13c>
			servoMoveTime = 0xFFFF;
     7b4:	2f ef       	ldi	r18, 0xFF	; 255
     7b6:	3f ef       	ldi	r19, 0xFF	; 255
     7b8:	40 e0       	ldi	r20, 0x00	; 0
     7ba:	50 e0       	ldi	r21, 0x00	; 0
		if (servoMoveTime > moveTime_ms)	// New maximum?
     7bc:	ce 01       	movw	r24, r28
     7be:	a0 e0       	ldi	r26, 0x00	; 0
     7c0:	b0 e0       	ldi	r27, 0x00	; 0
     7c2:	82 17       	cp	r24, r18
     7c4:	93 07       	cpc	r25, r19
     7c6:	a4 07       	cpc	r26, r20
     7c8:	b5 07       	cpc	r27, r21
     7ca:	08 f4       	brcc	.+2      	; 0x7ce <servo_calculations_update+0x14e>
			moveTime_ms = (uint16_t)servoMoveTime;
     7cc:	e9 01       	movw	r28, r18
	// Find the total move time.  This is based on the commanded total
	// and the move time calculated for each servo based on the speed
	// and the change in pulse width.  The final move time will be
	// the MAXIMUM of all the times specified in the command.
	uint16_t moveTime_ms = ServoCmdMoveTime;	// Start with commanded time in milliseconds
	for (uint8_t servoNum = 0; servoNum < NUM_SERVOS; ++servoNum)
     7ce:	1f 5f       	subi	r17, 0xFF	; 255
     7d0:	1c 30       	cpi	r17, 0x0C	; 12
     7d2:	08 f4       	brcc	.+2      	; 0x7d6 <servo_calculations_update+0x156>
     7d4:	6b cf       	rjmp	.-298    	; 0x6ac <servo_calculations_update+0x2c>
     7d6:	10 e0       	ldi	r17, 0x00	; 0
     7d8:	a3 c0       	rjmp	.+326    	; 0x920 <servo_calculations_update+0x2a0>
	for (uint8_t servoNum = 0; servoNum < NUM_SERVOS; ++servoNum)
	{
		int32_t servoPwDelta_L16;

		// If this servo is not part of the command, then skip
		if (!ServoCmdArray[servoNum].isCommanded)
     7da:	81 2f       	mov	r24, r17
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	fc 01       	movw	r30, r24
     7e0:	ee 0f       	add	r30, r30
     7e2:	ff 1f       	adc	r31, r31
     7e4:	ee 0f       	add	r30, r30
     7e6:	ff 1f       	adc	r31, r31
     7e8:	e8 0f       	add	r30, r24
     7ea:	f9 1f       	adc	r31, r25
     7ec:	e7 54       	subi	r30, 0x47	; 71
     7ee:	f7 4d       	sbci	r31, 0xD7	; 215
     7f0:	20 81       	ld	r18, Z
     7f2:	22 23       	and	r18, r18
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <servo_calculations_update+0x178>
     7f6:	93 c0       	rjmp	.+294    	; 0x91e <servo_calculations_update+0x29e>
			continue;
		
		// If this servo is commanded to or is currently '0' or '1', then store in
		// ServoPulseDefs with no speed.
		if ((ServoCmdArray[servoNum].targetPW == 0) || (ServoCmdArray[servoNum].targetPW == 0xFFFF)
     7f8:	fc 01       	movw	r30, r24
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	ee 0f       	add	r30, r30
     800:	ff 1f       	adc	r31, r31
     802:	e8 0f       	add	r30, r24
     804:	f9 1f       	adc	r31, r25
     806:	e7 54       	subi	r30, 0x47	; 71
     808:	f7 4d       	sbci	r31, 0xD7	; 215
     80a:	61 81       	ldd	r22, Z+1	; 0x01
     80c:	72 81       	ldd	r23, Z+2	; 0x02
     80e:	9b 01       	movw	r18, r22
     810:	21 50       	subi	r18, 0x01	; 1
     812:	31 09       	sbc	r19, r1
     814:	2e 3f       	cpi	r18, 0xFE	; 254
     816:	3f 4f       	sbci	r19, 0xFF	; 255
     818:	b0 f4       	brcc	.+44     	; 0x846 <servo_calculations_update+0x1c6>
			|| (ServoPulseDefs[servoNum].targetPW == 0) || (ServoPulseDefs[servoNum].targetPW == 0xFFFF))
     81a:	9c 01       	movw	r18, r24
     81c:	22 0f       	add	r18, r18
     81e:	33 1f       	adc	r19, r19
     820:	22 0f       	add	r18, r18
     822:	33 1f       	adc	r19, r19
     824:	22 0f       	add	r18, r18
     826:	33 1f       	adc	r19, r19
     828:	fc 01       	movw	r30, r24
     82a:	ee 0f       	add	r30, r30
     82c:	ff 1f       	adc	r31, r31
     82e:	e2 0f       	add	r30, r18
     830:	f3 1f       	adc	r31, r19
     832:	eb 50       	subi	r30, 0x0B	; 11
     834:	f7 4d       	sbci	r31, 0xD7	; 215
     836:	20 81       	ld	r18, Z
     838:	31 81       	ldd	r19, Z+1	; 0x01
     83a:	21 15       	cp	r18, r1
     83c:	31 05       	cpc	r19, r1
     83e:	19 f0       	breq	.+6      	; 0x846 <servo_calculations_update+0x1c6>
     840:	2f 3f       	cpi	r18, 0xFF	; 255
     842:	3f 4f       	sbci	r19, 0xFF	; 255
     844:	f1 f4       	brne	.+60     	; 0x882 <servo_calculations_update+0x202>
		{
			ServoPulseDefs[servoNum].targetPW = ServoCmdArray[servoNum].targetPW;
     846:	fc 01       	movw	r30, r24
     848:	ee 0f       	add	r30, r30
     84a:	ff 1f       	adc	r31, r31
     84c:	88 0f       	add	r24, r24
     84e:	99 1f       	adc	r25, r25
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	88 0f       	add	r24, r24
     856:	99 1f       	adc	r25, r25
     858:	e8 0f       	add	r30, r24
     85a:	f9 1f       	adc	r31, r25
     85c:	eb 50       	subi	r30, 0x0B	; 11
     85e:	f7 4d       	sbci	r31, 0xD7	; 215
     860:	60 83       	st	Z, r22
     862:	71 83       	std	Z+1, r23	; 0x01
			ServoPulseDefs[servoNum].currentPW_l16 = (uint32_t)ServoCmdArray[servoNum].targetPW << 16;
     864:	cb 01       	movw	r24, r22
     866:	a0 e0       	ldi	r26, 0x00	; 0
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	dc 01       	movw	r26, r24
     86c:	99 27       	eor	r25, r25
     86e:	88 27       	eor	r24, r24
     870:	82 83       	std	Z+2, r24	; 0x02
     872:	93 83       	std	Z+3, r25	; 0x03
     874:	a4 83       	std	Z+4, r26	; 0x04
     876:	b5 83       	std	Z+5, r27	; 0x05
			ServoPulseDefs[servoNum].deltaPW_l16 = 0;
     878:	16 82       	std	Z+6, r1	; 0x06
     87a:	17 82       	std	Z+7, r1	; 0x07
     87c:	10 86       	std	Z+8, r1	; 0x08
     87e:	11 86       	std	Z+9, r1	; 0x09
			continue;
     880:	4e c0       	rjmp	.+156    	; 0x91e <servo_calculations_update+0x29e>
		}

		// Store the target PW
		ServoPulseDefs[servoNum].targetPW = ServoCmdArray[servoNum].targetPW;
     882:	9c 01       	movw	r18, r24
     884:	22 0f       	add	r18, r18
     886:	33 1f       	adc	r19, r19
     888:	88 0f       	add	r24, r24
     88a:	99 1f       	adc	r25, r25
     88c:	88 0f       	add	r24, r24
     88e:	99 1f       	adc	r25, r25
     890:	88 0f       	add	r24, r24
     892:	99 1f       	adc	r25, r25
     894:	82 0f       	add	r24, r18
     896:	93 1f       	adc	r25, r19
     898:	9c 01       	movw	r18, r24
     89a:	2b 50       	subi	r18, 0x0B	; 11
     89c:	37 4d       	sbci	r19, 0xD7	; 215
     89e:	79 01       	movw	r14, r18
     8a0:	f9 01       	movw	r30, r18
     8a2:	60 83       	st	Z, r22
     8a4:	71 83       	std	Z+1, r23	; 0x01

		// Store the calculated deltaPW per loop, left shifted 16
		servoPwDelta_L16 = ((uint32_t)ServoPulseDefs[servoNum].targetPW << 16) - ServoPulseDefs[servoNum].currentPW_l16;
     8a6:	cb 01       	movw	r24, r22
     8a8:	a0 e0       	ldi	r26, 0x00	; 0
     8aa:	b0 e0       	ldi	r27, 0x00	; 0
     8ac:	dc 01       	movw	r26, r24
     8ae:	99 27       	eor	r25, r25
     8b0:	88 27       	eor	r24, r24
     8b2:	82 80       	ldd	r8, Z+2	; 0x02
     8b4:	93 80       	ldd	r9, Z+3	; 0x03
     8b6:	a4 80       	ldd	r10, Z+4	; 0x04
     8b8:	b5 80       	ldd	r11, Z+5	; 0x05
     8ba:	bc 01       	movw	r22, r24
     8bc:	cd 01       	movw	r24, r26
     8be:	68 19       	sub	r22, r8
     8c0:	79 09       	sbc	r23, r9
     8c2:	8a 09       	sbc	r24, r10
     8c4:	9b 09       	sbc	r25, r11
		ServoPulseDefs[servoNum].deltaPW_l16 = SERVO_PULSE_PERIOD_MS * (servoPwDelta_L16 / moveTime_ms);
     8c6:	4e 01       	movw	r8, r28
     8c8:	a1 2c       	mov	r10, r1
     8ca:	b1 2c       	mov	r11, r1
     8cc:	a5 01       	movw	r20, r10
     8ce:	94 01       	movw	r18, r8
     8d0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__divmodsi4>
     8d4:	ba 01       	movw	r22, r20
     8d6:	a9 01       	movw	r20, r18
     8d8:	44 0f       	add	r20, r20
     8da:	55 1f       	adc	r21, r21
     8dc:	66 1f       	adc	r22, r22
     8de:	77 1f       	adc	r23, r23
     8e0:	44 0f       	add	r20, r20
     8e2:	55 1f       	adc	r21, r21
     8e4:	66 1f       	adc	r22, r22
     8e6:	77 1f       	adc	r23, r23
     8e8:	db 01       	movw	r26, r22
     8ea:	ca 01       	movw	r24, r20
     8ec:	88 0f       	add	r24, r24
     8ee:	99 1f       	adc	r25, r25
     8f0:	aa 1f       	adc	r26, r26
     8f2:	bb 1f       	adc	r27, r27
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	aa 1f       	adc	r26, r26
     8fa:	bb 1f       	adc	r27, r27
     8fc:	84 0f       	add	r24, r20
     8fe:	95 1f       	adc	r25, r21
     900:	a6 1f       	adc	r26, r22
     902:	b7 1f       	adc	r27, r23
     904:	f7 01       	movw	r30, r14
     906:	86 83       	std	Z+6, r24	; 0x06
     908:	97 83       	std	Z+7, r25	; 0x07
     90a:	a0 87       	std	Z+8, r26	; 0x08
     90c:	b1 87       	std	Z+9, r27	; 0x09
		
		// Save the move time in this command in the global so we can track when it is done
		MillisRemainingInCommand = moveTime_ms;
     90e:	80 92 b5 28 	sts	0x28B5, r8	; 0x8028b5 <MillisRemainingInCommand>
     912:	90 92 b6 28 	sts	0x28B6, r9	; 0x8028b6 <MillisRemainingInCommand+0x1>
     916:	a0 92 b7 28 	sts	0x28B7, r10	; 0x8028b7 <MillisRemainingInCommand+0x2>
     91a:	b0 92 b8 28 	sts	0x28B8, r11	; 0x8028b8 <MillisRemainingInCommand+0x3>
			moveTime_ms = (uint16_t)servoMoveTime;
	}
	
	// Now that we have the move time, we can recalculate the speeds and
	// store in the ServoPulseDefs array
	for (uint8_t servoNum = 0; servoNum < NUM_SERVOS; ++servoNum)
     91e:	1f 5f       	subi	r17, 0xFF	; 255
     920:	1c 30       	cpi	r17, 0x0C	; 12
     922:	08 f4       	brcc	.+2      	; 0x926 <servo_calculations_update+0x2a6>
     924:	5a cf       	rjmp	.-332    	; 0x7da <servo_calculations_update+0x15a>
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	13 c0       	rjmp	.+38     	; 0x950 <servo_calculations_update+0x2d0>
	// Prepare for the next command by initializing all of the globals that
	// are used for command storage.
	// Clear servo command array to not commanded, and speed = max.
	for (uint8_t i = 0; i < NUM_SERVOS; ++i)
	{
		ServoCmdArray[i].isCommanded = false;
     92a:	e8 2f       	mov	r30, r24
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	9f 01       	movw	r18, r30
     930:	22 0f       	add	r18, r18
     932:	33 1f       	adc	r19, r19
     934:	22 0f       	add	r18, r18
     936:	33 1f       	adc	r19, r19
     938:	e2 0f       	add	r30, r18
     93a:	f3 1f       	adc	r31, r19
     93c:	e7 54       	subi	r30, 0x47	; 71
     93e:	f7 4d       	sbci	r31, 0xD7	; 215
     940:	10 82       	st	Z, r1
		ServoCmdArray[i].targetSpeed = 65535;
     942:	2f ef       	ldi	r18, 0xFF	; 255
     944:	3f ef       	ldi	r19, 0xFF	; 255
     946:	23 83       	std	Z+3, r18	; 0x03
     948:	34 83       	std	Z+4, r19	; 0x04
		ServoCmdArray[i].targetPW = 0;
     94a:	11 82       	std	Z+1, r1	; 0x01
     94c:	12 82       	std	Z+2, r1	; 0x02
	}
	
	// Prepare for the next command by initializing all of the globals that
	// are used for command storage.
	// Clear servo command array to not commanded, and speed = max.
	for (uint8_t i = 0; i < NUM_SERVOS; ++i)
     94e:	8f 5f       	subi	r24, 0xFF	; 255
     950:	8c 30       	cpi	r24, 0x0C	; 12
     952:	58 f3       	brcs	.-42     	; 0x92a <servo_calculations_update+0x2aa>
		ServoCmdArray[i].targetPW = 0;
	}
	// Clear the flag indicating that a command is waiting.
	ServoCmdWaiting = false;
	// Set the move time to 0 (default) for the next command
	ServoCmdMoveTime = 0;
     954:	10 92 b3 28 	sts	0x28B3, r1	; 0x8028b3 <ServoCmdMoveTime>
     958:	10 92 b4 28 	sts	0x28B4, r1	; 0x8028b4 <ServoCmdMoveTime+0x1>

}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	bf 90       	pop	r11
     968:	af 90       	pop	r10
     96a:	9f 90       	pop	r9
     96c:	8f 90       	pop	r8
     96e:	08 95       	ret

00000970 <servo_calculations_init>:
{
	// Must be called after the ServoCommandArray and related globals are
	// initialized.  This call to the servo_calculations_update()
	// function will initialize the ServoPulseDefs to the stating
	// condition of all servos OFF (logic '0').
	servo_calculations_update();
     970:	0e 94 40 03 	call	0x680	; 0x680 <servo_calculations_update>
     974:	08 95       	ret

00000976 <servo_pulse_update>:
* per group).  If the number of servos changes, then the function must be changed.
* Inputs: EdgeIndex, ServoPulseDefs, ServoPinDefs
* Outputs: EdgeIndex, ServoPulseEdges
**********************************************************************/
void servo_pulse_update(void)
{
     976:	6f 92       	push	r6
     978:	7f 92       	push	r7
     97a:	8f 92       	push	r8
     97c:	9f 92       	push	r9
     97e:	af 92       	push	r10
     980:	bf 92       	push	r11
     982:	cf 92       	push	r12
     984:	df 92       	push	r13
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
	// Test for all edges output.
	// When this happens, update the servo pulses and edges for next time.
	if ( EdgeIndex < (2 * NUM_SERVOS))
     992:	80 91 6d 29 	lds	r24, 0x296D	; 0x80296d <EdgeIndex>
     996:	88 31       	cpi	r24, 0x18	; 24
     998:	08 f4       	brcc	.+2      	; 0x99c <servo_pulse_update+0x26>
     99a:	84 c2       	rjmp	.+1288   	; 0xea4 <servo_pulse_update+0x52e>
		// Return if still outputting edges.
		return;
	}
	
	// Clear the edge index for next time
	EdgeIndex = 0;
     99c:	10 92 6d 29 	sts	0x296D, r1	; 0x80296d <EdgeIndex>

	// Increment the loop counter every 20ms (i.e. every time all of
	// the edges have been output for a loop)
	++LoopCount;
     9a0:	20 91 ab 28 	lds	r18, 0x28AB	; 0x8028ab <LoopCount>
     9a4:	30 91 ac 28 	lds	r19, 0x28AC	; 0x8028ac <LoopCount+0x1>
     9a8:	40 91 ad 28 	lds	r20, 0x28AD	; 0x8028ad <LoopCount+0x2>
     9ac:	50 91 ae 28 	lds	r21, 0x28AE	; 0x8028ae <LoopCount+0x3>
     9b0:	60 91 af 28 	lds	r22, 0x28AF	; 0x8028af <LoopCount+0x4>
     9b4:	70 91 b0 28 	lds	r23, 0x28B0	; 0x8028b0 <LoopCount+0x5>
     9b8:	80 91 b1 28 	lds	r24, 0x28B1	; 0x8028b1 <LoopCount+0x6>
     9bc:	90 91 b2 28 	lds	r25, 0x28B2	; 0x8028b2 <LoopCount+0x7>
     9c0:	a1 e0       	ldi	r26, 0x01	; 1
     9c2:	0e 94 31 09 	call	0x1262	; 0x1262 <__adddi3_s8>
     9c6:	20 93 ab 28 	sts	0x28AB, r18	; 0x8028ab <LoopCount>
     9ca:	30 93 ac 28 	sts	0x28AC, r19	; 0x8028ac <LoopCount+0x1>
     9ce:	40 93 ad 28 	sts	0x28AD, r20	; 0x8028ad <LoopCount+0x2>
     9d2:	50 93 ae 28 	sts	0x28AE, r21	; 0x8028ae <LoopCount+0x3>
     9d6:	60 93 af 28 	sts	0x28AF, r22	; 0x8028af <LoopCount+0x4>
     9da:	70 93 b0 28 	sts	0x28B0, r23	; 0x8028b0 <LoopCount+0x5>
     9de:	80 93 b1 28 	sts	0x28B1, r24	; 0x8028b1 <LoopCount+0x6>
     9e2:	90 93 b2 28 	sts	0x28B2, r25	; 0x8028b2 <LoopCount+0x7>
	
	// Update the time remaining in the latest command
	MillisRemainingInCommand -= SERVO_PULSE_PERIOD_MS;
     9e6:	80 91 b5 28 	lds	r24, 0x28B5	; 0x8028b5 <MillisRemainingInCommand>
     9ea:	90 91 b6 28 	lds	r25, 0x28B6	; 0x8028b6 <MillisRemainingInCommand+0x1>
     9ee:	a0 91 b7 28 	lds	r26, 0x28B7	; 0x8028b7 <MillisRemainingInCommand+0x2>
     9f2:	b0 91 b8 28 	lds	r27, 0x28B8	; 0x8028b8 <MillisRemainingInCommand+0x3>
     9f6:	44 97       	sbiw	r24, 0x14	; 20
     9f8:	a1 09       	sbc	r26, r1
     9fa:	b1 09       	sbc	r27, r1
     9fc:	80 93 b5 28 	sts	0x28B5, r24	; 0x8028b5 <MillisRemainingInCommand>
     a00:	90 93 b6 28 	sts	0x28B6, r25	; 0x8028b6 <MillisRemainingInCommand+0x1>
     a04:	a0 93 b7 28 	sts	0x28B7, r26	; 0x8028b7 <MillisRemainingInCommand+0x2>
     a08:	b0 93 b8 28 	sts	0x28B8, r27	; 0x8028b8 <MillisRemainingInCommand+0x3>
	if (MillisRemainingInCommand < 0)
     a0c:	bb 23       	and	r27, r27
     a0e:	44 f4       	brge	.+16     	; 0xa20 <servo_pulse_update+0xaa>
	{
		MillisRemainingInCommand = 0;
     a10:	10 92 b5 28 	sts	0x28B5, r1	; 0x8028b5 <MillisRemainingInCommand>
     a14:	10 92 b6 28 	sts	0x28B6, r1	; 0x8028b6 <MillisRemainingInCommand+0x1>
     a18:	10 92 b7 28 	sts	0x28B7, r1	; 0x8028b7 <MillisRemainingInCommand+0x2>
     a1c:	10 92 b8 28 	sts	0x28B8, r1	; 0x8028b8 <MillisRemainingInCommand+0x3>
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	3d c2       	rjmp	.+1146   	; 0xe9e <servo_pulse_update+0x528>
	for (uint8_t groupNum = 0; groupNum < 4; ++groupNum)
	{
		// Loop through the servos in the group, updating the pulse widths
		for (uint8_t offsetInGroup = 0; offsetInGroup < 3; ++offsetInGroup)
		{
			uint8_t servoNum = (groupNum * 3) + offsetInGroup;
     a24:	87 2f       	mov	r24, r23
     a26:	88 0f       	add	r24, r24
     a28:	87 0f       	add	r24, r23
     a2a:	89 0f       	add	r24, r25
			// Get a pointer to the pulse
			PulseDef_t *pulseDef = &ServoPulseDefs[servoNum];
     a2c:	e8 2f       	mov	r30, r24
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
			// Add the delta to the current PW.  If overshoot, then clip.
			pulseDef->currentPW_l16 += pulseDef->deltaPW_l16;
     a30:	df 01       	movw	r26, r30
     a32:	aa 0f       	add	r26, r26
     a34:	bb 1f       	adc	r27, r27
     a36:	9f 01       	movw	r18, r30
     a38:	22 0f       	add	r18, r18
     a3a:	33 1f       	adc	r19, r19
     a3c:	22 0f       	add	r18, r18
     a3e:	33 1f       	adc	r19, r19
     a40:	22 0f       	add	r18, r18
     a42:	33 1f       	adc	r19, r19
     a44:	a2 0f       	add	r26, r18
     a46:	b3 1f       	adc	r27, r19
     a48:	ab 50       	subi	r26, 0x0B	; 11
     a4a:	b7 4d       	sbci	r27, 0xD7	; 215
     a4c:	16 96       	adiw	r26, 0x06	; 6
     a4e:	8d 90       	ld	r8, X+
     a50:	9d 90       	ld	r9, X+
     a52:	ad 90       	ld	r10, X+
     a54:	bc 90       	ld	r11, X
     a56:	19 97       	sbiw	r26, 0x09	; 9
     a58:	12 96       	adiw	r26, 0x02	; 2
     a5a:	cd 90       	ld	r12, X+
     a5c:	dd 90       	ld	r13, X+
     a5e:	ed 90       	ld	r14, X+
     a60:	fc 90       	ld	r15, X
     a62:	15 97       	sbiw	r26, 0x05	; 5
     a64:	c8 0c       	add	r12, r8
     a66:	d9 1c       	adc	r13, r9
     a68:	ea 1c       	adc	r14, r10
     a6a:	fb 1c       	adc	r15, r11
     a6c:	12 96       	adiw	r26, 0x02	; 2
     a6e:	cd 92       	st	X+, r12
     a70:	dd 92       	st	X+, r13
     a72:	ed 92       	st	X+, r14
     a74:	fc 92       	st	X, r15
     a76:	15 97       	sbiw	r26, 0x05	; 5
			if (((pulseDef->deltaPW_l16 > 0) && (pulseDef->currentPW_l16 > ((uint32_t)(pulseDef->targetPW) << 16)))
     a78:	18 14       	cp	r1, r8
     a7a:	19 04       	cpc	r1, r9
     a7c:	1a 04       	cpc	r1, r10
     a7e:	1b 04       	cpc	r1, r11
     a80:	d4 f4       	brge	.+52     	; 0xab6 <servo_pulse_update+0x140>
     a82:	9f 01       	movw	r18, r30
     a84:	22 0f       	add	r18, r18
     a86:	33 1f       	adc	r19, r19
     a88:	22 0f       	add	r18, r18
     a8a:	33 1f       	adc	r19, r19
     a8c:	22 0f       	add	r18, r18
     a8e:	33 1f       	adc	r19, r19
     a90:	df 01       	movw	r26, r30
     a92:	aa 0f       	add	r26, r26
     a94:	bb 1f       	adc	r27, r27
     a96:	a2 0f       	add	r26, r18
     a98:	b3 1f       	adc	r27, r19
     a9a:	ab 50       	subi	r26, 0x0B	; 11
     a9c:	b7 4d       	sbci	r27, 0xD7	; 215
     a9e:	0d 91       	ld	r16, X+
     aa0:	1c 91       	ld	r17, X
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	98 01       	movw	r18, r16
     aa8:	11 27       	eor	r17, r17
     aaa:	00 27       	eor	r16, r16
     aac:	0c 15       	cp	r16, r12
     aae:	1d 05       	cpc	r17, r13
     ab0:	2e 05       	cpc	r18, r14
     ab2:	3f 05       	cpc	r19, r15
     ab4:	e0 f0       	brcs	.+56     	; 0xaee <servo_pulse_update+0x178>
			|| ((pulseDef->deltaPW_l16 < 0) && (pulseDef->currentPW_l16 < ((uint32_t)(pulseDef->targetPW) << 16))))
     ab6:	bb 20       	and	r11, r11
     ab8:	b4 f5       	brge	.+108    	; 0xb26 <servo_pulse_update+0x1b0>
     aba:	9f 01       	movw	r18, r30
     abc:	22 0f       	add	r18, r18
     abe:	33 1f       	adc	r19, r19
     ac0:	22 0f       	add	r18, r18
     ac2:	33 1f       	adc	r19, r19
     ac4:	22 0f       	add	r18, r18
     ac6:	33 1f       	adc	r19, r19
     ac8:	df 01       	movw	r26, r30
     aca:	aa 0f       	add	r26, r26
     acc:	bb 1f       	adc	r27, r27
     ace:	a2 0f       	add	r26, r18
     ad0:	b3 1f       	adc	r27, r19
     ad2:	ab 50       	subi	r26, 0x0B	; 11
     ad4:	b7 4d       	sbci	r27, 0xD7	; 215
     ad6:	0d 91       	ld	r16, X+
     ad8:	1c 91       	ld	r17, X
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	98 01       	movw	r18, r16
     ae0:	11 27       	eor	r17, r17
     ae2:	00 27       	eor	r16, r16
     ae4:	c0 16       	cp	r12, r16
     ae6:	d1 06       	cpc	r13, r17
     ae8:	e2 06       	cpc	r14, r18
     aea:	f3 06       	cpc	r15, r19
     aec:	e0 f4       	brcc	.+56     	; 0xb26 <servo_pulse_update+0x1b0>
			{
				pulseDef->currentPW_l16 = (uint32_t)(pulseDef->targetPW) << 16;
     aee:	9f 01       	movw	r18, r30
     af0:	22 0f       	add	r18, r18
     af2:	33 1f       	adc	r19, r19
     af4:	22 0f       	add	r18, r18
     af6:	33 1f       	adc	r19, r19
     af8:	22 0f       	add	r18, r18
     afa:	33 1f       	adc	r19, r19
     afc:	df 01       	movw	r26, r30
     afe:	aa 0f       	add	r26, r26
     b00:	bb 1f       	adc	r27, r27
     b02:	a2 0f       	add	r26, r18
     b04:	b3 1f       	adc	r27, r19
     b06:	ab 50       	subi	r26, 0x0B	; 11
     b08:	b7 4d       	sbci	r27, 0xD7	; 215
     b0a:	0d 91       	ld	r16, X+
     b0c:	1c 91       	ld	r17, X
     b0e:	11 97       	sbiw	r26, 0x01	; 1
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	98 01       	movw	r18, r16
     b16:	11 27       	eor	r17, r17
     b18:	00 27       	eor	r16, r16
     b1a:	12 96       	adiw	r26, 0x02	; 2
     b1c:	0d 93       	st	X+, r16
     b1e:	1d 93       	st	X+, r17
     b20:	2d 93       	st	X+, r18
     b22:	3c 93       	st	X, r19
     b24:	15 97       	sbiw	r26, 0x05	; 5
			}
			// Store the resulting pulse width in the pulseWidths array for later use.
			pulseWidths[offsetInGroup].servoNum = servoNum;
     b26:	29 2f       	mov	r18, r25
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	d9 01       	movw	r26, r18
     b2c:	aa 0f       	add	r26, r26
     b2e:	bb 1f       	adc	r27, r27
     b30:	a2 0f       	add	r26, r18
     b32:	b3 1f       	adc	r27, r19
     b34:	a7 5d       	subi	r26, 0xD7	; 215
     b36:	b7 4d       	sbci	r27, 0xD7	; 215
     b38:	8c 93       	st	X, r24
			pulseWidths[offsetInGroup].pw = pulseDef->currentPW_l16 >> 16;
     b3a:	af 01       	movw	r20, r30
     b3c:	44 0f       	add	r20, r20
     b3e:	55 1f       	adc	r21, r21
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	ee 0f       	add	r30, r30
     b46:	ff 1f       	adc	r31, r31
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	e4 0f       	add	r30, r20
     b4e:	f5 1f       	adc	r31, r21
     b50:	eb 50       	subi	r30, 0x0B	; 11
     b52:	f7 4d       	sbci	r31, 0xD7	; 215
     b54:	c2 80       	ldd	r12, Z+2	; 0x02
     b56:	d3 80       	ldd	r13, Z+3	; 0x03
     b58:	e4 80       	ldd	r14, Z+4	; 0x04
     b5a:	f5 80       	ldd	r15, Z+5	; 0x05
     b5c:	67 01       	movw	r12, r14
     b5e:	ee 24       	eor	r14, r14
     b60:	ff 24       	eor	r15, r15
     b62:	11 96       	adiw	r26, 0x01	; 1
     b64:	cd 92       	st	X+, r12
     b66:	dc 92       	st	X, r13
     b68:	12 97       	sbiw	r26, 0x02	; 2
			// If the pulse width is outside the range, then force it to 1 beyond the range.
			// This ensures that all such pulse widths sort correctly in the next step.
			if (pulseWidths[offsetInGroup].pw < MINIMUM_PW)
     b6a:	84 ef       	ldi	r24, 0xF4	; 244
     b6c:	c8 16       	cp	r12, r24
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	d8 06       	cpc	r13, r24
     b72:	30 f4       	brcc	.+12     	; 0xb80 <servo_pulse_update+0x20a>
			{
				pulseWidths[offsetInGroup].pw = MINIMUM_PW - 1;
     b74:	fd 01       	movw	r30, r26
     b76:	23 ef       	ldi	r18, 0xF3	; 243
     b78:	31 e0       	ldi	r19, 0x01	; 1
     b7a:	21 83       	std	Z+1, r18	; 0x01
     b7c:	32 83       	std	Z+2, r19	; 0x02
     b7e:	11 c0       	rjmp	.+34     	; 0xba2 <servo_pulse_update+0x22c>
			}
			else if (pulseWidths[offsetInGroup].pw > MAXIMUM_PW)
     b80:	e5 ec       	ldi	r30, 0xC5	; 197
     b82:	ce 16       	cp	r12, r30
     b84:	e9 e0       	ldi	r30, 0x09	; 9
     b86:	de 06       	cpc	r13, r30
     b88:	60 f0       	brcs	.+24     	; 0xba2 <servo_pulse_update+0x22c>
			{
				pulseWidths[offsetInGroup].pw = MAXIMUM_PW + 1;
     b8a:	f9 01       	movw	r30, r18
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	2e 0f       	add	r18, r30
     b92:	3f 1f       	adc	r19, r31
     b94:	f9 01       	movw	r30, r18
     b96:	e7 5d       	subi	r30, 0xD7	; 215
     b98:	f7 4d       	sbci	r31, 0xD7	; 215
     b9a:	25 ec       	ldi	r18, 0xC5	; 197
     b9c:	39 e0       	ldi	r19, 0x09	; 9
     b9e:	21 83       	std	Z+1, r18	; 0x01
     ba0:	32 83       	std	Z+2, r19	; 0x02
	// Update the global pulse array by adding the delta to each pulse
	// width, then clipping to the target.  Work one group at a time.
	for (uint8_t groupNum = 0; groupNum < 4; ++groupNum)
	{
		// Loop through the servos in the group, updating the pulse widths
		for (uint8_t offsetInGroup = 0; offsetInGroup < 3; ++offsetInGroup)
     ba2:	9f 5f       	subi	r25, 0xFF	; 255
     ba4:	01 c0       	rjmp	.+2      	; 0xba8 <servo_pulse_update+0x232>
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	93 30       	cpi	r25, 0x03	; 3
     baa:	08 f4       	brcc	.+2      	; 0xbae <servo_pulse_update+0x238>
     bac:	3b cf       	rjmp	.-394    	; 0xa24 <servo_pulse_update+0xae>
     bae:	c0 e0       	ldi	r28, 0x00	; 0
     bb0:	5d c0       	rjmp	.+186    	; 0xc6c <servo_pulse_update+0x2f6>
		// number and pulse width for each servo in the group.  Sort the
		// pulseWidths array by pulse width, from smallest to largest.
		// Insertion sort
		for (uint8_t i = 0; i < 2; ++i)	// Hard coded for 3 pulse per group
		{
			uint16_t minPW = pulseWidths[i].pw;
     bb2:	4c 2f       	mov	r20, r28
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	fa 01       	movw	r30, r20
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	e4 0f       	add	r30, r20
     bbe:	f5 1f       	adc	r31, r21
     bc0:	e7 5d       	subi	r30, 0xD7	; 215
     bc2:	f7 4d       	sbci	r31, 0xD7	; 215
     bc4:	a1 81       	ldd	r26, Z+1	; 0x01
     bc6:	b2 81       	ldd	r27, Z+2	; 0x02
			uint8_t minIdx = i;
			for (uint8_t j = i+1; j < 3; ++j)
     bc8:	d1 e0       	ldi	r29, 0x01	; 1
     bca:	dc 0f       	add	r29, r28
     bcc:	2d 2f       	mov	r18, r29
		// pulseWidths array by pulse width, from smallest to largest.
		// Insertion sort
		for (uint8_t i = 0; i < 2; ++i)	// Hard coded for 3 pulse per group
		{
			uint16_t minPW = pulseWidths[i].pw;
			uint8_t minIdx = i;
     bce:	6c 2f       	mov	r22, r28
			for (uint8_t j = i+1; j < 3; ++j)
     bd0:	12 c0       	rjmp	.+36     	; 0xbf6 <servo_pulse_update+0x280>
			{
				if (pulseWidths[j].pw < minPW)
     bd2:	82 2f       	mov	r24, r18
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	fc 01       	movw	r30, r24
     bd8:	ee 0f       	add	r30, r30
     bda:	ff 1f       	adc	r31, r31
     bdc:	8e 0f       	add	r24, r30
     bde:	9f 1f       	adc	r25, r31
     be0:	fc 01       	movw	r30, r24
     be2:	e7 5d       	subi	r30, 0xD7	; 215
     be4:	f7 4d       	sbci	r31, 0xD7	; 215
     be6:	81 81       	ldd	r24, Z+1	; 0x01
     be8:	92 81       	ldd	r25, Z+2	; 0x02
     bea:	8a 17       	cp	r24, r26
     bec:	9b 07       	cpc	r25, r27
     bee:	10 f4       	brcc	.+4      	; 0xbf4 <servo_pulse_update+0x27e>
				{
					minPW = pulseWidths[j].pw;
					minIdx = j;
     bf0:	62 2f       	mov	r22, r18
			uint8_t minIdx = i;
			for (uint8_t j = i+1; j < 3; ++j)
			{
				if (pulseWidths[j].pw < minPW)
				{
					minPW = pulseWidths[j].pw;
     bf2:	dc 01       	movw	r26, r24
		// Insertion sort
		for (uint8_t i = 0; i < 2; ++i)	// Hard coded for 3 pulse per group
		{
			uint16_t minPW = pulseWidths[i].pw;
			uint8_t minIdx = i;
			for (uint8_t j = i+1; j < 3; ++j)
     bf4:	2f 5f       	subi	r18, 0xFF	; 255
     bf6:	23 30       	cpi	r18, 0x03	; 3
     bf8:	60 f3       	brcs	.-40     	; 0xbd2 <servo_pulse_update+0x25c>
				{
					minPW = pulseWidths[j].pw;
					minIdx = j;
				}
			}
			if (minIdx != i)
     bfa:	c6 17       	cp	r28, r22
     bfc:	b1 f1       	breq	.+108    	; 0xc6a <servo_pulse_update+0x2f4>
			{
				// Insert
				pulseWidth_t temp = pulseWidths[minIdx];
     bfe:	86 2f       	mov	r24, r22
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	fc 01       	movw	r30, r24
     c04:	ee 0f       	add	r30, r30
     c06:	ff 1f       	adc	r31, r31
     c08:	8e 0f       	add	r24, r30
     c0a:	9f 1f       	adc	r25, r31
     c0c:	fc 01       	movw	r30, r24
     c0e:	e7 5d       	subi	r30, 0xD7	; 215
     c10:	f7 4d       	sbci	r31, 0xD7	; 215
     c12:	60 80       	ld	r6, Z
     c14:	71 80       	ldd	r7, Z+1	; 0x01
     c16:	82 80       	ldd	r8, Z+2	; 0x02
				for (uint8_t k = minIdx; k > i; --k)
     c18:	1b c0       	rjmp	.+54     	; 0xc50 <servo_pulse_update+0x2da>
				{
					pulseWidths[k] = pulseWidths[k-1];
     c1a:	26 2f       	mov	r18, r22
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	c9 01       	movw	r24, r18
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	d9 01       	movw	r26, r18
     c24:	aa 0f       	add	r26, r26
     c26:	bb 1f       	adc	r27, r27
     c28:	2a 0f       	add	r18, r26
     c2a:	3b 1f       	adc	r19, r27
     c2c:	d9 01       	movw	r26, r18
     c2e:	a7 5d       	subi	r26, 0xD7	; 215
     c30:	b7 4d       	sbci	r27, 0xD7	; 215
     c32:	fc 01       	movw	r30, r24
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	8e 0f       	add	r24, r30
     c3a:	9f 1f       	adc	r25, r31
     c3c:	fc 01       	movw	r30, r24
     c3e:	e7 5d       	subi	r30, 0xD7	; 215
     c40:	f7 4d       	sbci	r31, 0xD7	; 215
     c42:	c0 80       	ld	r12, Z
     c44:	d1 80       	ldd	r13, Z+1	; 0x01
     c46:	e2 80       	ldd	r14, Z+2	; 0x02
     c48:	cd 92       	st	X+, r12
     c4a:	dd 92       	st	X+, r13
     c4c:	ec 92       	st	X, r14
			}
			if (minIdx != i)
			{
				// Insert
				pulseWidth_t temp = pulseWidths[minIdx];
				for (uint8_t k = minIdx; k > i; --k)
     c4e:	61 50       	subi	r22, 0x01	; 1
     c50:	c6 17       	cp	r28, r22
     c52:	18 f3       	brcs	.-58     	; 0xc1a <servo_pulse_update+0x2a4>
				{
					pulseWidths[k] = pulseWidths[k-1];
				}
				pulseWidths[i] = temp;
     c54:	fa 01       	movw	r30, r20
     c56:	ee 0f       	add	r30, r30
     c58:	ff 1f       	adc	r31, r31
     c5a:	4e 0f       	add	r20, r30
     c5c:	5f 1f       	adc	r21, r31
     c5e:	fa 01       	movw	r30, r20
     c60:	e7 5d       	subi	r30, 0xD7	; 215
     c62:	f7 4d       	sbci	r31, 0xD7	; 215
     c64:	60 82       	st	Z, r6
     c66:	71 82       	std	Z+1, r7	; 0x01
     c68:	82 82       	std	Z+2, r8	; 0x02
     c6a:	cd 2f       	mov	r28, r29
			
		// At this point, the pulseWidths array has been written with the servo
		// number and pulse width for each servo in the group.  Sort the
		// pulseWidths array by pulse width, from smallest to largest.
		// Insertion sort
		for (uint8_t i = 0; i < 2; ++i)	// Hard coded for 3 pulse per group
     c6c:	c2 30       	cpi	r28, 0x02	; 2
     c6e:	08 f4       	brcc	.+2      	; 0xc72 <servo_pulse_update+0x2fc>
     c70:	a0 cf       	rjmp	.-192    	; 0xbb2 <servo_pulse_update+0x23c>
			}
		}
		
		// Now that the pulseWidths array has the pulses in the group sorted,
		// write the edge array with the appropriate values.
		uint16_t risingEdgeTime = groupNum * 3000; // Each group starts 3000 us apart
     c72:	88 eb       	ldi	r24, 0xB8	; 184
     c74:	9b e0       	ldi	r25, 0x0B	; 11
     c76:	78 9f       	mul	r23, r24
     c78:	a0 01       	movw	r20, r0
     c7a:	79 9f       	mul	r23, r25
     c7c:	50 0d       	add	r21, r0
     c7e:	11 24       	eor	r1, r1
		uint8_t risingEdgeNum = groupNum * 6;	// 6 edges per group (3 rising, 3 falling)
     c80:	87 2f       	mov	r24, r23
     c82:	88 0f       	add	r24, r24
     c84:	87 0f       	add	r24, r23
     c86:	a8 2f       	mov	r26, r24
     c88:	aa 0f       	add	r26, r26
     c8a:	ba 2f       	mov	r27, r26
     c8c:	1a 2f       	mov	r17, r26
		for (uint8_t offsetInGroup = 0;	offsetInGroup < 3;	++offsetInGroup)
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	b9 c0       	rjmp	.+370    	; 0xe04 <servo_pulse_update+0x48e>
		{
			uint8_t servoNum = pulseWidths[offsetInGroup].servoNum;
     c92:	a6 2e       	mov	r10, r22
     c94:	b1 2c       	mov	r11, r1
     c96:	f5 01       	movw	r30, r10
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	ea 0d       	add	r30, r10
     c9e:	fb 1d       	adc	r31, r11
     ca0:	e7 5d       	subi	r30, 0xD7	; 215
     ca2:	f7 4d       	sbci	r31, 0xD7	; 215
     ca4:	20 81       	ld	r18, Z
			uint16_t pw = pulseWidths[offsetInGroup].pw;
     ca6:	c1 81       	ldd	r28, Z+1	; 0x01
     ca8:	d2 81       	ldd	r29, Z+2	; 0x02
			uint8_t bitMap = ServoPinDefs[servoNum].bitMap;
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	f9 01       	movw	r30, r18
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	ee 0f       	add	r30, r30
     cb4:	ff 1f       	adc	r31, r31
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	e2 1b       	sub	r30, r18
     cbc:	f3 0b       	sbc	r31, r19
     cbe:	ec 5f       	subi	r30, 0xFC	; 252
     cc0:	fc 4a       	sbci	r31, 0xAC	; 172
     cc2:	e6 80       	ldd	r14, Z+6	; 0x06

			// Store rising edge values.  Each rising edge is offset RISING_EDGE_SPACING from the previous.
			// For now, store the edge time for this edge.  It will adjusted later.
			ServoPulseEdges[risingEdgeNum].nextEdge = risingEdgeTime + (offsetInGroup * RISING_EDGE_SPACING);
     cc4:	81 2f       	mov	r24, r17
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	e4 e1       	ldi	r30, 0x14	; 20
     cca:	ea 9d       	mul	r30, r10
     ccc:	60 01       	movw	r12, r0
     cce:	eb 9d       	mul	r30, r11
     cd0:	d0 0c       	add	r13, r0
     cd2:	11 24       	eor	r1, r1
     cd4:	c4 0e       	add	r12, r20
     cd6:	d5 1e       	adc	r13, r21
     cd8:	fc 01       	movw	r30, r24
     cda:	ee 0f       	add	r30, r30
     cdc:	ff 1f       	adc	r31, r31
     cde:	ee 0f       	add	r30, r30
     ce0:	ff 1f       	adc	r31, r31
     ce2:	e8 0f       	add	r30, r24
     ce4:	f9 1f       	adc	r31, r25
     ce6:	ed 5c       	subi	r30, 0xCD	; 205
     ce8:	f7 4d       	sbci	r31, 0xD7	; 215
     cea:	c3 82       	std	Z+3, r12	; 0x03
     cec:	d4 82       	std	Z+4, r13	; 0x04
			ServoPulseEdges[risingEdgeNum].bitMap = bitMap;
     cee:	e2 82       	std	Z+2, r14	; 0x02
			// Set rising edge register address
			if (pw < MINIMUM_PW)
     cf0:	c4 3f       	cpi	r28, 0xF4	; 244
     cf2:	e1 e0       	ldi	r30, 0x01	; 1
     cf4:	de 07       	cpc	r29, r30
     cf6:	c8 f4       	brcc	.+50     	; 0xd2a <servo_pulse_update+0x3b4>
			{
				// Pulse width less than minimum indicates pin should stay at logic '0', so no rising edge.
				ServoPulseEdges[risingEdgeNum].regAddr = ServoPinDefs[servoNum].outclrRegAddr;
     cf8:	f9 01       	movw	r30, r18
     cfa:	ee 0f       	add	r30, r30
     cfc:	ff 1f       	adc	r31, r31
     cfe:	ee 0f       	add	r30, r30
     d00:	ff 1f       	adc	r31, r31
     d02:	ee 0f       	add	r30, r30
     d04:	ff 1f       	adc	r31, r31
     d06:	e2 1b       	sub	r30, r18
     d08:	f3 0b       	sbc	r31, r19
     d0a:	ec 5f       	subi	r30, 0xFC	; 252
     d0c:	fc 4a       	sbci	r31, 0xAC	; 172
     d0e:	c2 80       	ldd	r12, Z+2	; 0x02
     d10:	d3 80       	ldd	r13, Z+3	; 0x03
     d12:	fc 01       	movw	r30, r24
     d14:	ee 0f       	add	r30, r30
     d16:	ff 1f       	adc	r31, r31
     d18:	ee 0f       	add	r30, r30
     d1a:	ff 1f       	adc	r31, r31
     d1c:	e8 0f       	add	r30, r24
     d1e:	f9 1f       	adc	r31, r25
     d20:	ed 5c       	subi	r30, 0xCD	; 205
     d22:	f7 4d       	sbci	r31, 0xD7	; 215
     d24:	c0 82       	st	Z, r12
     d26:	d1 82       	std	Z+1, r13	; 0x01
     d28:	18 c0       	rjmp	.+48     	; 0xd5a <servo_pulse_update+0x3e4>
			}
			else
			{
				// Pulse width greater than minimum indicates rising edge (or constant '1') needed.
				ServoPulseEdges[risingEdgeNum].regAddr = ServoPinDefs[servoNum].outsetRegAddr;
     d2a:	f9 01       	movw	r30, r18
     d2c:	ee 0f       	add	r30, r30
     d2e:	ff 1f       	adc	r31, r31
     d30:	ee 0f       	add	r30, r30
     d32:	ff 1f       	adc	r31, r31
     d34:	ee 0f       	add	r30, r30
     d36:	ff 1f       	adc	r31, r31
     d38:	e2 1b       	sub	r30, r18
     d3a:	f3 0b       	sbc	r31, r19
     d3c:	ec 5f       	subi	r30, 0xFC	; 252
     d3e:	fc 4a       	sbci	r31, 0xAC	; 172
     d40:	c0 80       	ld	r12, Z
     d42:	d1 80       	ldd	r13, Z+1	; 0x01
     d44:	fc 01       	movw	r30, r24
     d46:	ee 0f       	add	r30, r30
     d48:	ff 1f       	adc	r31, r31
     d4a:	ee 0f       	add	r30, r30
     d4c:	ff 1f       	adc	r31, r31
     d4e:	e8 0f       	add	r30, r24
     d50:	f9 1f       	adc	r31, r25
     d52:	ed 5c       	subi	r30, 0xCD	; 205
     d54:	f7 4d       	sbci	r31, 0xD7	; 215
     d56:	c0 82       	st	Z, r12
     d58:	d1 82       	std	Z+1, r13	; 0x01
			}

			// Store falling edge values.  The falling edge time is just PW later than the rising edge.
			uint8_t fallingEdgeNum = risingEdgeNum + 3;
			uint16_t fallingEdgeTime = ServoPulseEdges[risingEdgeNum].nextEdge + pw;
     d5a:	fc 01       	movw	r30, r24
     d5c:	ee 0f       	add	r30, r30
     d5e:	ff 1f       	adc	r31, r31
     d60:	ee 0f       	add	r30, r30
     d62:	ff 1f       	adc	r31, r31
     d64:	8e 0f       	add	r24, r30
     d66:	9f 1f       	adc	r25, r31
     d68:	fc 01       	movw	r30, r24
     d6a:	ed 5c       	subi	r30, 0xCD	; 205
     d6c:	f7 4d       	sbci	r31, 0xD7	; 215
     d6e:	c3 80       	ldd	r12, Z+3	; 0x03
     d70:	d4 80       	ldd	r13, Z+4	; 0x04
     d72:	cc 0e       	add	r12, r28
     d74:	dd 1e       	adc	r13, r29
			// For now, store the edge time for this edge.  It will adjusted later.
			ServoPulseEdges[fallingEdgeNum].nextEdge = fallingEdgeTime;
     d76:	83 e0       	ldi	r24, 0x03	; 3
     d78:	81 0f       	add	r24, r17
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	fc 01       	movw	r30, r24
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	ee 0f       	add	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	e8 0f       	add	r30, r24
     d88:	f9 1f       	adc	r31, r25
     d8a:	ed 5c       	subi	r30, 0xCD	; 205
     d8c:	f7 4d       	sbci	r31, 0xD7	; 215
     d8e:	c3 82       	std	Z+3, r12	; 0x03
     d90:	d4 82       	std	Z+4, r13	; 0x04
			ServoPulseEdges[fallingEdgeNum].bitMap = bitMap;
     d92:	e2 82       	std	Z+2, r14	; 0x02
			// Set falling edge register address
			if (pw > MAXIMUM_PW)
     d94:	c5 3c       	cpi	r28, 0xC5	; 197
     d96:	d9 40       	sbci	r29, 0x09	; 9
     d98:	d0 f0       	brcs	.+52     	; 0xdce <servo_pulse_update+0x458>
			{
				// Pulse width greater than maximum indicates pin should stay at logic '1', so no falling edge.
				ServoPulseEdges[fallingEdgeNum].regAddr = ServoPinDefs[servoNum].outsetRegAddr;
     d9a:	f9 01       	movw	r30, r18
     d9c:	ee 0f       	add	r30, r30
     d9e:	ff 1f       	adc	r31, r31
     da0:	ee 0f       	add	r30, r30
     da2:	ff 1f       	adc	r31, r31
     da4:	ee 0f       	add	r30, r30
     da6:	ff 1f       	adc	r31, r31
     da8:	e2 1b       	sub	r30, r18
     daa:	f3 0b       	sbc	r31, r19
     dac:	ec 5f       	subi	r30, 0xFC	; 252
     dae:	fc 4a       	sbci	r31, 0xAC	; 172
     db0:	20 81       	ld	r18, Z
     db2:	31 81       	ldd	r19, Z+1	; 0x01
     db4:	fc 01       	movw	r30, r24
     db6:	ee 0f       	add	r30, r30
     db8:	ff 1f       	adc	r31, r31
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	8e 0f       	add	r24, r30
     dc0:	9f 1f       	adc	r25, r31
     dc2:	fc 01       	movw	r30, r24
     dc4:	ed 5c       	subi	r30, 0xCD	; 205
     dc6:	f7 4d       	sbci	r31, 0xD7	; 215
     dc8:	20 83       	st	Z, r18
     dca:	31 83       	std	Z+1, r19	; 0x01
     dcc:	19 c0       	rjmp	.+50     	; 0xe00 <servo_pulse_update+0x48a>
			}
			else
			{
				// Pulse width greater than minimum indicates falling edge (or constant '0') needed.
				ServoPulseEdges[fallingEdgeNum].regAddr = ServoPinDefs[servoNum].outclrRegAddr;
     dce:	f9 01       	movw	r30, r18
     dd0:	ee 0f       	add	r30, r30
     dd2:	ff 1f       	adc	r31, r31
     dd4:	ee 0f       	add	r30, r30
     dd6:	ff 1f       	adc	r31, r31
     dd8:	ee 0f       	add	r30, r30
     dda:	ff 1f       	adc	r31, r31
     ddc:	e2 1b       	sub	r30, r18
     dde:	f3 0b       	sbc	r31, r19
     de0:	ec 5f       	subi	r30, 0xFC	; 252
     de2:	fc 4a       	sbci	r31, 0xAC	; 172
     de4:	22 81       	ldd	r18, Z+2	; 0x02
     de6:	33 81       	ldd	r19, Z+3	; 0x03
     de8:	fc 01       	movw	r30, r24
     dea:	ee 0f       	add	r30, r30
     dec:	ff 1f       	adc	r31, r31
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	8e 0f       	add	r24, r30
     df4:	9f 1f       	adc	r25, r31
     df6:	fc 01       	movw	r30, r24
     df8:	ed 5c       	subi	r30, 0xCD	; 205
     dfa:	f7 4d       	sbci	r31, 0xD7	; 215
     dfc:	20 83       	st	Z, r18
     dfe:	31 83       	std	Z+1, r19	; 0x01
			}
			
			// Increment risingEdgeNum for next loop
			++risingEdgeNum;
     e00:	1f 5f       	subi	r17, 0xFF	; 255
		
		// Now that the pulseWidths array has the pulses in the group sorted,
		// write the edge array with the appropriate values.
		uint16_t risingEdgeTime = groupNum * 3000; // Each group starts 3000 us apart
		uint8_t risingEdgeNum = groupNum * 6;	// 6 edges per group (3 rising, 3 falling)
		for (uint8_t offsetInGroup = 0;	offsetInGroup < 3;	++offsetInGroup)
     e02:	6f 5f       	subi	r22, 0xFF	; 255
     e04:	63 30       	cpi	r22, 0x03	; 3
     e06:	08 f4       	brcc	.+2      	; 0xe0a <servo_pulse_update+0x494>
     e08:	44 cf       	rjmp	.-376    	; 0xc92 <servo_pulse_update+0x31c>
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	20 c0       	rjmp	.+64     	; 0xe4e <servo_pulse_update+0x4d8>
		// set separately to the start of the next group.
		uint8_t edgeNum = groupNum * 6;
		for (uint8_t i = 0; i < 5; ++i)
		{
			// Set each nextEdge to the edge time for the next edge
			ServoPulseEdges[edgeNum + i].nextEdge = ServoPulseEdges[edgeNum + i + 1].nextEdge;
     e0e:	86 2f       	mov	r24, r22
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	8b 0f       	add	r24, r27
     e14:	91 1d       	adc	r25, r1
     e16:	9c 01       	movw	r18, r24
     e18:	2f 5f       	subi	r18, 0xFF	; 255
     e1a:	3f 4f       	sbci	r19, 0xFF	; 255
     e1c:	f9 01       	movw	r30, r18
     e1e:	ee 0f       	add	r30, r30
     e20:	ff 1f       	adc	r31, r31
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	2e 0f       	add	r18, r30
     e28:	3f 1f       	adc	r19, r31
     e2a:	f9 01       	movw	r30, r18
     e2c:	ed 5c       	subi	r30, 0xCD	; 205
     e2e:	f7 4d       	sbci	r31, 0xD7	; 215
     e30:	23 81       	ldd	r18, Z+3	; 0x03
     e32:	34 81       	ldd	r19, Z+4	; 0x04
     e34:	fc 01       	movw	r30, r24
     e36:	ee 0f       	add	r30, r30
     e38:	ff 1f       	adc	r31, r31
     e3a:	ee 0f       	add	r30, r30
     e3c:	ff 1f       	adc	r31, r31
     e3e:	8e 0f       	add	r24, r30
     e40:	9f 1f       	adc	r25, r31
     e42:	fc 01       	movw	r30, r24
     e44:	ed 5c       	subi	r30, 0xCD	; 205
     e46:	f7 4d       	sbci	r31, 0xD7	; 215
     e48:	23 83       	std	Z+3, r18	; 0x03
     e4a:	34 83       	std	Z+4, r19	; 0x04
	
		// At this point, the "nextEdge" entry for ServoPulseEdges is set to the current edge.  Loop
		// through and adjust this.  Only loop through the first 5 edges.  The last one will be
		// set separately to the start of the next group.
		uint8_t edgeNum = groupNum * 6;
		for (uint8_t i = 0; i < 5; ++i)
     e4c:	6f 5f       	subi	r22, 0xFF	; 255
     e4e:	65 30       	cpi	r22, 0x05	; 5
     e50:	f0 f2       	brcs	.-68     	; 0xe0e <servo_pulse_update+0x498>
		{
			// Set each nextEdge to the edge time for the next edge
			ServoPulseEdges[edgeNum + i].nextEdge = ServoPulseEdges[edgeNum + i + 1].nextEdge;
		}
		// Last entry should be the first edge of the next group
		if (risingEdgeTime < 9000)
     e52:	48 32       	cpi	r20, 0x28	; 40
     e54:	83 e2       	ldi	r24, 0x23	; 35
     e56:	58 07       	cpc	r21, r24
     e58:	90 f4       	brcc	.+36     	; 0xe7e <servo_pulse_update+0x508>
		{
			// Last edge of group, next edge is the first edge of the next group
			ServoPulseEdges[edgeNum + 5].nextEdge = risingEdgeTime + 3000;
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	15 96       	adiw	r26, 0x05	; 5
     e5e:	48 54       	subi	r20, 0x48	; 72
     e60:	54 4f       	sbci	r21, 0xF4	; 244
     e62:	cd 01       	movw	r24, r26
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	a8 0f       	add	r26, r24
     e6e:	b9 1f       	adc	r27, r25
     e70:	ad 5c       	subi	r26, 0xCD	; 205
     e72:	b7 4d       	sbci	r27, 0xD7	; 215
     e74:	13 96       	adiw	r26, 0x03	; 3
     e76:	4d 93       	st	X+, r20
     e78:	5c 93       	st	X, r21
     e7a:	14 97       	sbiw	r26, 0x04	; 4
     e7c:	0f c0       	rjmp	.+30     	; 0xe9c <servo_pulse_update+0x526>
		}
		else
		{
			// Last edge of last group, next edge is at time 0 to start next cycle
			ServoPulseEdges[edgeNum + 5].nextEdge = 0;
     e7e:	8a 2f       	mov	r24, r26
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	05 96       	adiw	r24, 0x05	; 5
     e84:	fc 01       	movw	r30, r24
     e86:	ee 0f       	add	r30, r30
     e88:	ff 1f       	adc	r31, r31
     e8a:	ee 0f       	add	r30, r30
     e8c:	ff 1f       	adc	r31, r31
     e8e:	8e 0f       	add	r24, r30
     e90:	9f 1f       	adc	r25, r31
     e92:	fc 01       	movw	r30, r24
     e94:	ed 5c       	subi	r30, 0xCD	; 205
     e96:	f7 4d       	sbci	r31, 0xD7	; 215
     e98:	13 82       	std	Z+3, r1	; 0x03
     e9a:	14 82       	std	Z+4, r1	; 0x04
		MillisRemainingInCommand = 0;
	}

	// Update the global pulse array by adding the delta to each pulse
	// width, then clipping to the target.  Work one group at a time.
	for (uint8_t groupNum = 0; groupNum < 4; ++groupNum)
     e9c:	7f 5f       	subi	r23, 0xFF	; 255
     e9e:	74 30       	cpi	r23, 0x04	; 4
     ea0:	08 f4       	brcc	.+2      	; 0xea4 <servo_pulse_update+0x52e>
     ea2:	81 ce       	rjmp	.-766    	; 0xba6 <servo_pulse_update+0x230>
		{
			// Last edge of last group, next edge is at time 0 to start next cycle
			ServoPulseEdges[edgeNum + 5].nextEdge = 0;
		}
	}
}
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	ff 90       	pop	r15
     eae:	ef 90       	pop	r14
     eb0:	df 90       	pop	r13
     eb2:	cf 90       	pop	r12
     eb4:	bf 90       	pop	r11
     eb6:	af 90       	pop	r10
     eb8:	9f 90       	pop	r9
     eba:	8f 90       	pop	r8
     ebc:	7f 90       	pop	r7
     ebe:	6f 90       	pop	r6
     ec0:	08 95       	ret

00000ec2 <servo_pulse_init>:
* Initialize the servo output pins and the array of servo edges.
**********************************************************************/
void servo_pulse_init(void)
{
	// Init servo pulse output pins
	for (uint8_t servoNum = 0; servoNum < NUM_SERVOS; ++servoNum)
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	16 c0       	rjmp	.+44     	; 0xef2 <servo_pulse_init+0x30>
	{
		*ServoPinDefs[servoNum].outclrRegAddr = ServoPinDefs[servoNum].bitMap;	// Set the pin value to ''0'
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	f9 01       	movw	r30, r18
     ecc:	ee 0f       	add	r30, r30
     ece:	ff 1f       	adc	r31, r31
     ed0:	ee 0f       	add	r30, r30
     ed2:	ff 1f       	adc	r31, r31
     ed4:	ee 0f       	add	r30, r30
     ed6:	ff 1f       	adc	r31, r31
     ed8:	e2 1b       	sub	r30, r18
     eda:	f3 0b       	sbc	r31, r19
     edc:	ec 5f       	subi	r30, 0xFC	; 252
     ede:	fc 4a       	sbci	r31, 0xAC	; 172
     ee0:	a2 81       	ldd	r26, Z+2	; 0x02
     ee2:	b3 81       	ldd	r27, Z+3	; 0x03
     ee4:	96 81       	ldd	r25, Z+6	; 0x06
     ee6:	9c 93       	st	X, r25
		*ServoPinDefs[servoNum].dirsetRegAddr = ServoPinDefs[servoNum].bitMap;	// Configure the pin as output
     ee8:	04 80       	ldd	r0, Z+4	; 0x04
     eea:	f5 81       	ldd	r31, Z+5	; 0x05
     eec:	e0 2d       	mov	r30, r0
     eee:	90 83       	st	Z, r25
* Initialize the servo output pins and the array of servo edges.
**********************************************************************/
void servo_pulse_init(void)
{
	// Init servo pulse output pins
	for (uint8_t servoNum = 0; servoNum < NUM_SERVOS; ++servoNum)
     ef0:	8f 5f       	subi	r24, 0xFF	; 255
     ef2:	8c 30       	cpi	r24, 0x0C	; 12
     ef4:	40 f3       	brcs	.-48     	; 0xec6 <servo_pulse_init+0x4>
	}

	// Init the ServoPulseEdges[] array.  This must be called after
	// the ServoPulseDefs[] array has been initialized to the
	// starting values.
	EdgeIndex = 2 * NUM_SERVOS;
     ef6:	88 e1       	ldi	r24, 0x18	; 24
     ef8:	80 93 6d 29 	sts	0x296D, r24	; 0x80296d <EdgeIndex>
	servo_pulse_update();
     efc:	0e 94 bb 04 	call	0x976	; 0x976 <servo_pulse_update>
     f00:	08 95       	ret

00000f02 <__vector_9>:
/**********************************************************************
* Timer ISR to output edges.  This takes about 10us with an 8MHz clock.
* The edges must therefore be > 10us apart.
**********************************************************************/
ISR(TCA0_CMP0_vect)
{
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	0f 92       	push	r0
     f0a:	11 24       	eor	r1, r1
     f0c:	8f 93       	push	r24
     f0e:	9f 93       	push	r25
     f10:	af 93       	push	r26
     f12:	bf 93       	push	r27
     f14:	ef 93       	push	r30
     f16:	ff 93       	push	r31
	TCA0_SINGLE_INTFLAGS = TCA_SINGLE_CMP0_bm;		// Clear the flag
     f18:	80 e1       	ldi	r24, 0x10	; 16
     f1a:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f4a0b>
	EdgeDef_t *edge = &ServoPulseEdges[EdgeIndex];	// Pointer to the current edge
     f1e:	80 91 6d 29 	lds	r24, 0x296D	; 0x80296d <EdgeIndex>
     f22:	e8 2f       	mov	r30, r24
     f24:	f0 e0       	ldi	r31, 0x00	; 0
	++EdgeIndex;									// Increment index
     f26:	8f 5f       	subi	r24, 0xFF	; 255
     f28:	80 93 6d 29 	sts	0x296D, r24	; 0x80296d <EdgeIndex>
	*edge->regAddr = edge->bitMap;					// Set pin high/low
     f2c:	cf 01       	movw	r24, r30
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	e8 0f       	add	r30, r24
     f38:	f9 1f       	adc	r31, r25
     f3a:	ed 5c       	subi	r30, 0xCD	; 205
     f3c:	f7 4d       	sbci	r31, 0xD7	; 215
     f3e:	a0 81       	ld	r26, Z
     f40:	b1 81       	ldd	r27, Z+1	; 0x01
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	8c 93       	st	X, r24
	TCA0_SINGLE_CMP0 = edge->nextEdge;				// Ready for next edge
     f46:	83 81       	ldd	r24, Z+3	; 0x03
     f48:	94 81       	ldd	r25, Z+4	; 0x04
     f4a:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7f4a28>
     f4e:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7f4a29>
}
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	bf 91       	pop	r27
     f58:	af 91       	pop	r26
     f5a:	9f 91       	pop	r25
     f5c:	8f 91       	pop	r24
     f5e:	0f 90       	pop	r0
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	0f 90       	pop	r0
     f64:	1f 90       	pop	r1
     f66:	18 95       	reti

00000f68 <timer_init>:
* - Enable the timer interrupt
**********************************************************************/
void timer_init(void)
{
	// Set the TCA count to 1 so the first interrupt won't happen right away
	TCA0_SINGLE_CNT = 1;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
     f70:	90 93 21 0a 	sts	0x0A21, r25	; 0x800a21 <__TEXT_REGION_LENGTH__+0x7f4a21>
	// Set Compare Channel 0 register to 0 for the first interrupt
	TCA0_SINGLE_CMP0 = 0;
     f74:	10 92 28 0a 	sts	0x0A28, r1	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7f4a28>
     f78:	10 92 29 0a 	sts	0x0A29, r1	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7f4a29>
	// Init TCA to 1MHz timebase, TOP=20000 (for a 20ms period)
	// The peripheral clock is the 8MHz main clock
	TCA0_SINGLE_CTRLA = TCA_SINGLE_CLKSEL_DIV8_gc | TCA_SINGLE_ENABLE_bm;
     f7c:	87 e0       	ldi	r24, 0x07	; 7
     f7e:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
	TCA0_SINGLE_PER = 20000;
     f82:	80 e2       	ldi	r24, 0x20	; 32
     f84:	9e e4       	ldi	r25, 0x4E	; 78
     f86:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f4a26>
     f8a:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f4a27>
	TCA0_SINGLE_CTRLB = TCA_SINGLE_WGMODE_NORMAL_gc;
     f8e:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
	// Set the TCA0 CMPO interrupt to level 1 so it can interrupt USART interrupts
	CPUINT_LVL1VEC = TCA0_CMP0_vect_num;
     f92:	89 e0       	ldi	r24, 0x09	; 9
     f94:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
	// Clear interrupt flag and enable interrupt on Compare Channel 0
	TCA0_SINGLE_INTFLAGS = TCA_SINGLE_CMP0_bm;
     f98:	80 e1       	ldi	r24, 0x10	; 16
     f9a:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f4a0b>
	TCA0_SINGLE_INTCTRL = TCA_SINGLE_CMP0_bm;
     f9e:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <__TEXT_REGION_LENGTH__+0x7f4a0a>
     fa2:	08 95       	ret

00000fa4 <__vector_17>:
/**********************************************************************
* UART RX ISR.  Places received bytes in RX queue.  This ISR does not
* check if the queue is full.
**********************************************************************/
ISR(USART0_RXC_vect)
{
     fa4:	1f 92       	push	r1
     fa6:	0f 92       	push	r0
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	0f 92       	push	r0
     fac:	11 24       	eor	r1, r1
     fae:	8f 93       	push	r24
     fb0:	9f 93       	push	r25
     fb2:	ef 93       	push	r30
     fb4:	ff 93       	push	r31
	rx_queue[rxq_add_idx] = USART0_RXDATAL;
     fb6:	80 91 6f 29 	lds	r24, 0x296F	; 0x80296f <rxq_add_idx>
     fba:	e8 2f       	mov	r30, r24
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
     fc2:	ef 58       	subi	r30, 0x8F	; 143
     fc4:	f6 4d       	sbci	r31, 0xD6	; 214
     fc6:	90 83       	st	Z, r25
	++rxq_add_idx;
     fc8:	8f 5f       	subi	r24, 0xFF	; 255
     fca:	80 93 6f 29 	sts	0x296F, r24	; 0x80296f <rxq_add_idx>
	if (rxq_add_idx >= RXQ_NBYTES)
     fce:	8f 3f       	cpi	r24, 0xFF	; 255
     fd0:	11 f4       	brne	.+4      	; 0xfd6 <__vector_17+0x32>
	{
		rxq_add_idx = 0;
     fd2:	10 92 6f 29 	sts	0x296F, r1	; 0x80296f <rxq_add_idx>
	}
}
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	9f 91       	pop	r25
     fdc:	8f 91       	pop	r24
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	0f 90       	pop	r0
     fe4:	1f 90       	pop	r1
     fe6:	18 95       	reti

00000fe8 <__vector_18>:
/**********************************************************************
* UART TX ISR.  If a byte is in the TX queue, transmits it.
* Otherwise, disables the interrupt.
**********************************************************************/
ISR(USART0_DRE_vect)
{
     fe8:	1f 92       	push	r1
     fea:	0f 92       	push	r0
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	0f 92       	push	r0
     ff0:	11 24       	eor	r1, r1
     ff2:	8f 93       	push	r24
     ff4:	ef 93       	push	r30
     ff6:	ff 93       	push	r31
	if (txq_remove_idx == txq_add_idx)
     ff8:	e0 91 6f 2b 	lds	r30, 0x2B6F	; 0x802b6f <txq_remove_idx>
     ffc:	80 91 6e 29 	lds	r24, 0x296E	; 0x80296e <txq_add_idx>
    1000:	e8 13       	cpse	r30, r24
    1002:	04 c0       	rjmp	.+8      	; 0x100c <__vector_18+0x24>
	{
		// Queue empty, disable the interrupt.  No need for a read-
		// modify-write.  All interrupt enables are known value.
		USART0_CTRLA = USART_RXCIE_bm;	// RXC interrupt is always enabled
    1004:	80 e8       	ldi	r24, 0x80	; 128
    1006:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f4805>
    100a:	0f c0       	rjmp	.+30     	; 0x102a <__vector_18+0x42>
		// Queue not empty, transmit the byte.  Do not check for
		// empty queue after transmit.  Instead, allow another
		// interrupt after this byte is transmitted.  This is
		// consistent with the expectation of the function to add
		// bytes to the TX queue.
		USART0_TXDATAL = tx_queue[txq_remove_idx];
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	e0 59       	subi	r30, 0x90	; 144
    1010:	f5 4d       	sbci	r31, 0xD5	; 213
    1012:	80 81       	ld	r24, Z
    1014:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		++txq_remove_idx;
    1018:	80 91 6f 2b 	lds	r24, 0x2B6F	; 0x802b6f <txq_remove_idx>
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	80 93 6f 2b 	sts	0x2B6F, r24	; 0x802b6f <txq_remove_idx>
		if (txq_remove_idx >= TXQ_NBYTES)
    1022:	8f 3f       	cpi	r24, 0xFF	; 255
    1024:	11 f4       	brne	.+4      	; 0x102a <__vector_18+0x42>
		{
			txq_remove_idx = 0;
    1026:	10 92 6f 2b 	sts	0x2B6F, r1	; 0x802b6f <txq_remove_idx>
		}
	}
}
    102a:	ff 91       	pop	r31
    102c:	ef 91       	pop	r30
    102e:	8f 91       	pop	r24
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	0f 90       	pop	r0
    1036:	1f 90       	pop	r1
    1038:	18 95       	reti

0000103a <uart_init>:


void uart_init(void)
{
	// Select the alternate pins (PA4/PA5) for UART0
	PORTMUX_USARTROUTEA = (PORTMUX_USARTROUTEA & ~PORTMUX_USART0_gm) | PORTMUX_USART0_ALT1_gc;
    103a:	e2 ee       	ldi	r30, 0xE2	; 226
    103c:	f5 e0       	ldi	r31, 0x05	; 5
    103e:	80 81       	ld	r24, Z
    1040:	8c 7f       	andi	r24, 0xFC	; 252
    1042:	81 60       	ori	r24, 0x01	; 1
    1044:	80 83       	st	Z, r24
	
	// Set the Baud rate to 115200
	USART0_BAUD = 277;
    1046:	85 e1       	ldi	r24, 0x15	; 21
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7f4808>
    104e:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x7f4809>
	
	// Define the port pin directions.
	PORTA_DIRSET = _BV(4);
    1052:	80 e1       	ldi	r24, 0x10	; 16
    1054:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7f4401>
	PORTA_DIRCLR = _BV(5);
    1058:	80 e2       	ldi	r24, 0x20	; 32
    105a:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__TEXT_REGION_LENGTH__+0x7f4402>
	
	// Enable TX and RX, set modes, etc.
	// Asynchronous, normal speed, no parity, 1 stop bit, 8 data bits
	USART0_CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc | USART_CHSIZE_8BIT_gc;
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__TEXT_REGION_LENGTH__+0x7f4807>
	USART0_CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_RXMODE_NORMAL_gc;
    1064:	80 ec       	ldi	r24, 0xC0	; 192
    1066:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x7f4806>
	
	// Enable the RX ISR.  The TX ISR will be enabled only if there is
	// data to transmit.
	USART0_CTRLA = USART_RXCIE_bm;
    106a:	80 e8       	ldi	r24, 0x80	; 128
    106c:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f4805>
    1070:	08 95       	ret

00001072 <uart_update>:
}

void uart_update(void)
{
    1072:	08 95       	ret

00001074 <uart_rx_get_char>:
// enable by examining the TX queue add/remove indexes, but that is
// an undesirable interaction between the TX/RX queues and should be
// avoided if possible.)
//*********************************************************************
bool uart_rx_get_char(uint8_t * rxByte)
{
    1074:	dc 01       	movw	r26, r24
	//    will look like the queue is empty this call, but the
	//    function will be called again, and the next time it
	//    will return the received byte.
	// In both of these cases, no harm is done due to the
	// incoherence.
	if (rxq_remove_idx == rxq_add_idx)
    1076:	e0 91 70 29 	lds	r30, 0x2970	; 0x802970 <rxq_remove_idx>
    107a:	90 91 6f 29 	lds	r25, 0x296F	; 0x80296f <rxq_add_idx>
    107e:	e9 17       	cp	r30, r25
    1080:	81 f0       	breq	.+32     	; 0x10a2 <uart_rx_get_char+0x2e>
	{
		return false;
	}

	// Get the character from the queue and store in the passed location.
	*rxByte = rx_queue[rxq_remove_idx] ;
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	ef 58       	subi	r30, 0x8F	; 143
    1086:	f6 4d       	sbci	r31, 0xD6	; 214
    1088:	80 81       	ld	r24, Z
    108a:	8c 93       	st	X, r24

	// Update the remove pointer.  Do not disable interrupts.  The
	// remove index is not read or modified in the ISR.
	++rxq_remove_idx;
    108c:	80 91 70 29 	lds	r24, 0x2970	; 0x802970 <rxq_remove_idx>
    1090:	8f 5f       	subi	r24, 0xFF	; 255
    1092:	80 93 70 29 	sts	0x2970, r24	; 0x802970 <rxq_remove_idx>
	if (rxq_remove_idx == RXQ_NBYTES)
    1096:	8f 3f       	cpi	r24, 0xFF	; 255
    1098:	31 f4       	brne	.+12     	; 0x10a6 <uart_rx_get_char+0x32>
	{
		rxq_remove_idx = 0;
    109a:	10 92 70 29 	sts	0x2970, r1	; 0x802970 <rxq_remove_idx>
	}

	// Return TRUE, indicating a valid character
	return true;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	08 95       	ret
	//    will return the received byte.
	// In both of these cases, no harm is done due to the
	// incoherence.
	if (rxq_remove_idx == rxq_add_idx)
	{
		return false;
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	08 95       	ret
	{
		rxq_remove_idx = 0;
	}

	// Return TRUE, indicating a valid character
	return true;
    10a6:	81 e0       	ldi	r24, 0x01	; 1

}
    10a8:	08 95       	ret

000010aa <uart_tx_put_char>:
// outputs.
//*********************************************************************
void uart_tx_put_char(uint8_t txByte)
{
	// Disable the TX interrupt while adding to the queue
	USART0_CTRLA = USART_RXCIE_bm;	// RXC interrupt is always enabled
    10aa:	90 e8       	ldi	r25, 0x80	; 128
    10ac:	90 93 05 08 	sts	0x0805, r25	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f4805>
	
	// Store the character on the queue.
	tx_queue[txq_add_idx] = txByte;
    10b0:	90 91 6e 29 	lds	r25, 0x296E	; 0x80296e <txq_add_idx>
    10b4:	e9 2f       	mov	r30, r25
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	e0 59       	subi	r30, 0x90	; 144
    10ba:	f5 4d       	sbci	r31, 0xD5	; 213
    10bc:	80 83       	st	Z, r24
	
	// Update the TX add index.
	++txq_add_idx;
    10be:	9f 5f       	subi	r25, 0xFF	; 255
    10c0:	90 93 6e 29 	sts	0x296E, r25	; 0x80296e <txq_add_idx>
	if (txq_add_idx >= TXQ_NBYTES)
    10c4:	9f 3f       	cpi	r25, 0xFF	; 255
    10c6:	11 f4       	brne	.+4      	; 0x10cc <uart_tx_put_char+0x22>
	{
		txq_add_idx = 0;
    10c8:	10 92 6e 29 	sts	0x296E, r1	; 0x80296e <txq_add_idx>
	}
	
	// Enable the TX interrupt.
	USART0_CTRLA = USART_RXCIE_bm | USART_DREIE_bm;	// RXC interrupt is always enabled
    10cc:	80 ea       	ldi	r24, 0xA0	; 160
    10ce:	80 93 05 08 	sts	0x0805, r24	; 0x800805 <__TEXT_REGION_LENGTH__+0x7f4805>
    10d2:	08 95       	ret

000010d4 <uart_tx_string>:

//*********************************************************************
// Transmit an ASCIIZ string.  Max length = 20 bytes (arbitrary).
//*********************************************************************
void uart_tx_string(uint8_t * s)
{
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; i < 20; ++i)
    10dc:	c0 e0       	ldi	r28, 0x00	; 0
    10de:	09 c0       	rjmp	.+18     	; 0x10f2 <uart_tx_string+0x1e>
	{
		if (s[i] == 0)
    10e0:	f8 01       	movw	r30, r16
    10e2:	ec 0f       	add	r30, r28
    10e4:	f1 1d       	adc	r31, r1
    10e6:	80 81       	ld	r24, Z
    10e8:	88 23       	and	r24, r24
    10ea:	29 f0       	breq	.+10     	; 0x10f6 <uart_tx_string+0x22>
		{
			// End of ASCIIZ string, leave without sending
			break;
		}
		uart_tx_put_char(s[i]);
    10ec:	0e 94 55 08 	call	0x10aa	; 0x10aa <uart_tx_put_char>
//*********************************************************************
// Transmit an ASCIIZ string.  Max length = 20 bytes (arbitrary).
//*********************************************************************
void uart_tx_string(uint8_t * s)
{
	for (uint8_t i = 0; i < 20; ++i)
    10f0:	cf 5f       	subi	r28, 0xFF	; 255
    10f2:	c4 31       	cpi	r28, 0x14	; 20
    10f4:	a8 f3       	brcs	.-22     	; 0x10e0 <uart_tx_string+0xc>
			// End of ASCIIZ string, leave without sending
			break;
		}
		uart_tx_put_char(s[i]);
	}
}
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	08 95       	ret

000010fe <uart_tx_uint16>:

//*********************************************************************
// Transmit an unsigned integer.
//*********************************************************************
void uart_tx_uint16(uint16_t num)
{
    10fe:	1f 93       	push	r17
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	26 97       	sbiw	r28, 0x06	; 6
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	ac 01       	movw	r20, r24
	uint8_t digits[6];
	
	digits[5] = 0;	// ASCIIZ terminator
    1110:	1e 82       	std	Y+6, r1	; 0x06
	int8_t i = 4;
    1112:	14 e0       	ldi	r17, 0x04	; 4
	do 
	{
		uint8_t digit;
		digit = num % 10;
    1114:	9a 01       	movw	r18, r20
    1116:	ad ec       	ldi	r26, 0xCD	; 205
    1118:	bc ec       	ldi	r27, 0xCC	; 204
    111a:	0e 94 10 09 	call	0x1220	; 0x1220 <__umulhisi3>
    111e:	96 95       	lsr	r25
    1120:	87 95       	ror	r24
    1122:	96 95       	lsr	r25
    1124:	87 95       	ror	r24
    1126:	96 95       	lsr	r25
    1128:	87 95       	ror	r24
    112a:	9c 01       	movw	r18, r24
    112c:	22 0f       	add	r18, r18
    112e:	33 1f       	adc	r19, r19
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	82 0f       	add	r24, r18
    113e:	93 1f       	adc	r25, r19
    1140:	9a 01       	movw	r18, r20
    1142:	28 1b       	sub	r18, r24
    1144:	39 0b       	sbc	r19, r25
    1146:	c9 01       	movw	r24, r18
		digits[i] = digit + '0';
    1148:	e1 e0       	ldi	r30, 0x01	; 1
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	ec 0f       	add	r30, r28
    114e:	fd 1f       	adc	r31, r29
    1150:	e1 0f       	add	r30, r17
    1152:	f1 1d       	adc	r31, r1
    1154:	17 fd       	sbrc	r17, 7
    1156:	fa 95       	dec	r31
    1158:	80 5d       	subi	r24, 0xD0	; 208
    115a:	80 83       	st	Z, r24
		num /= 10;
    115c:	9a 01       	movw	r18, r20
    115e:	0e 94 10 09 	call	0x1220	; 0x1220 <__umulhisi3>
    1162:	ac 01       	movw	r20, r24
    1164:	56 95       	lsr	r21
    1166:	47 95       	ror	r20
    1168:	56 95       	lsr	r21
    116a:	47 95       	ror	r20
    116c:	56 95       	lsr	r21
    116e:	47 95       	ror	r20
		--i;
    1170:	11 50       	subi	r17, 0x01	; 1
	} while (num != 0);
    1172:	41 15       	cp	r20, r1
    1174:	51 05       	cpc	r21, r1
    1176:	71 f6       	brne	.-100    	; 0x1114 <uart_tx_uint16+0x16>

	// Transmit the string of digits.  Variable 'i' is 1 less than the
	// index of the first character
	uart_tx_string(&digits[i+1]);
    1178:	81 2f       	mov	r24, r17
    117a:	11 0f       	add	r17, r17
    117c:	99 0b       	sbc	r25, r25
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	21 e0       	ldi	r18, 0x01	; 1
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	2c 0f       	add	r18, r28
    1186:	3d 1f       	adc	r19, r29
    1188:	82 0f       	add	r24, r18
    118a:	93 1f       	adc	r25, r19
    118c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <uart_tx_string>
    1190:	26 96       	adiw	r28, 0x06	; 6
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	08 95       	ret

0000119e <__udivmodsi4>:
    119e:	a1 e2       	ldi	r26, 0x21	; 33
    11a0:	1a 2e       	mov	r1, r26
    11a2:	aa 1b       	sub	r26, r26
    11a4:	bb 1b       	sub	r27, r27
    11a6:	fd 01       	movw	r30, r26
    11a8:	0d c0       	rjmp	.+26     	; 0x11c4 <__udivmodsi4_ep>

000011aa <__udivmodsi4_loop>:
    11aa:	aa 1f       	adc	r26, r26
    11ac:	bb 1f       	adc	r27, r27
    11ae:	ee 1f       	adc	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	a2 17       	cp	r26, r18
    11b4:	b3 07       	cpc	r27, r19
    11b6:	e4 07       	cpc	r30, r20
    11b8:	f5 07       	cpc	r31, r21
    11ba:	20 f0       	brcs	.+8      	; 0x11c4 <__udivmodsi4_ep>
    11bc:	a2 1b       	sub	r26, r18
    11be:	b3 0b       	sbc	r27, r19
    11c0:	e4 0b       	sbc	r30, r20
    11c2:	f5 0b       	sbc	r31, r21

000011c4 <__udivmodsi4_ep>:
    11c4:	66 1f       	adc	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	1a 94       	dec	r1
    11ce:	69 f7       	brne	.-38     	; 0x11aa <__udivmodsi4_loop>
    11d0:	60 95       	com	r22
    11d2:	70 95       	com	r23
    11d4:	80 95       	com	r24
    11d6:	90 95       	com	r25
    11d8:	9b 01       	movw	r18, r22
    11da:	ac 01       	movw	r20, r24
    11dc:	bd 01       	movw	r22, r26
    11de:	cf 01       	movw	r24, r30
    11e0:	08 95       	ret

000011e2 <__divmodsi4>:
    11e2:	05 2e       	mov	r0, r21
    11e4:	97 fb       	bst	r25, 7
    11e6:	1e f4       	brtc	.+6      	; 0x11ee <__divmodsi4+0xc>
    11e8:	00 94       	com	r0
    11ea:	0e 94 08 09 	call	0x1210	; 0x1210 <__negsi2>
    11ee:	57 fd       	sbrc	r21, 7
    11f0:	07 d0       	rcall	.+14     	; 0x1200 <__divmodsi4_neg2>
    11f2:	0e 94 cf 08 	call	0x119e	; 0x119e <__udivmodsi4>
    11f6:	07 fc       	sbrc	r0, 7
    11f8:	03 d0       	rcall	.+6      	; 0x1200 <__divmodsi4_neg2>
    11fa:	4e f4       	brtc	.+18     	; 0x120e <__divmodsi4_exit>
    11fc:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__negsi2>

00001200 <__divmodsi4_neg2>:
    1200:	50 95       	com	r21
    1202:	40 95       	com	r20
    1204:	30 95       	com	r19
    1206:	21 95       	neg	r18
    1208:	3f 4f       	sbci	r19, 0xFF	; 255
    120a:	4f 4f       	sbci	r20, 0xFF	; 255
    120c:	5f 4f       	sbci	r21, 0xFF	; 255

0000120e <__divmodsi4_exit>:
    120e:	08 95       	ret

00001210 <__negsi2>:
    1210:	90 95       	com	r25
    1212:	80 95       	com	r24
    1214:	70 95       	com	r23
    1216:	61 95       	neg	r22
    1218:	7f 4f       	sbci	r23, 0xFF	; 255
    121a:	8f 4f       	sbci	r24, 0xFF	; 255
    121c:	9f 4f       	sbci	r25, 0xFF	; 255
    121e:	08 95       	ret

00001220 <__umulhisi3>:
    1220:	a2 9f       	mul	r26, r18
    1222:	b0 01       	movw	r22, r0
    1224:	b3 9f       	mul	r27, r19
    1226:	c0 01       	movw	r24, r0
    1228:	a3 9f       	mul	r26, r19
    122a:	70 0d       	add	r23, r0
    122c:	81 1d       	adc	r24, r1
    122e:	11 24       	eor	r1, r1
    1230:	91 1d       	adc	r25, r1
    1232:	b2 9f       	mul	r27, r18
    1234:	70 0d       	add	r23, r0
    1236:	81 1d       	adc	r24, r1
    1238:	11 24       	eor	r1, r1
    123a:	91 1d       	adc	r25, r1
    123c:	08 95       	ret

0000123e <__usmulhisi3>:
    123e:	0e 94 10 09 	call	0x1220	; 0x1220 <__umulhisi3>

00001242 <__usmulhisi3_tail>:
    1242:	b7 ff       	sbrs	r27, 7
    1244:	08 95       	ret
    1246:	82 1b       	sub	r24, r18
    1248:	93 0b       	sbc	r25, r19
    124a:	08 95       	ret

0000124c <__muluhisi3>:
    124c:	0e 94 10 09 	call	0x1220	; 0x1220 <__umulhisi3>
    1250:	a5 9f       	mul	r26, r21
    1252:	90 0d       	add	r25, r0
    1254:	b4 9f       	mul	r27, r20
    1256:	90 0d       	add	r25, r0
    1258:	a4 9f       	mul	r26, r20
    125a:	80 0d       	add	r24, r0
    125c:	91 1d       	adc	r25, r1
    125e:	11 24       	eor	r1, r1
    1260:	08 95       	ret

00001262 <__adddi3_s8>:
    1262:	00 24       	eor	r0, r0
    1264:	a7 fd       	sbrc	r26, 7
    1266:	00 94       	com	r0
    1268:	2a 0f       	add	r18, r26
    126a:	30 1d       	adc	r19, r0
    126c:	40 1d       	adc	r20, r0
    126e:	50 1d       	adc	r21, r0
    1270:	60 1d       	adc	r22, r0
    1272:	70 1d       	adc	r23, r0
    1274:	80 1d       	adc	r24, r0
    1276:	90 1d       	adc	r25, r0
    1278:	08 95       	ret

0000127a <atoi>:
    127a:	fc 01       	movw	r30, r24
    127c:	88 27       	eor	r24, r24
    127e:	99 27       	eor	r25, r25
    1280:	e8 94       	clt
    1282:	21 91       	ld	r18, Z+
    1284:	20 32       	cpi	r18, 0x20	; 32
    1286:	e9 f3       	breq	.-6      	; 0x1282 <atoi+0x8>
    1288:	29 30       	cpi	r18, 0x09	; 9
    128a:	10 f0       	brcs	.+4      	; 0x1290 <atoi+0x16>
    128c:	2e 30       	cpi	r18, 0x0E	; 14
    128e:	c8 f3       	brcs	.-14     	; 0x1282 <atoi+0x8>
    1290:	2b 32       	cpi	r18, 0x2B	; 43
    1292:	41 f0       	breq	.+16     	; 0x12a4 <atoi+0x2a>
    1294:	2d 32       	cpi	r18, 0x2D	; 45
    1296:	39 f4       	brne	.+14     	; 0x12a6 <atoi+0x2c>
    1298:	68 94       	set
    129a:	04 c0       	rjmp	.+8      	; 0x12a4 <atoi+0x2a>
    129c:	0e 94 75 09 	call	0x12ea	; 0x12ea <__mulhi_const_10>
    12a0:	82 0f       	add	r24, r18
    12a2:	91 1d       	adc	r25, r1
    12a4:	21 91       	ld	r18, Z+
    12a6:	20 53       	subi	r18, 0x30	; 48
    12a8:	2a 30       	cpi	r18, 0x0A	; 10
    12aa:	c0 f3       	brcs	.-16     	; 0x129c <atoi+0x22>
    12ac:	1e f4       	brtc	.+6      	; 0x12b4 <atoi+0x3a>
    12ae:	90 95       	com	r25
    12b0:	81 95       	neg	r24
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	08 95       	ret

000012b6 <isspace>:
    12b6:	91 11       	cpse	r25, r1
    12b8:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__ctype_isfalse>
    12bc:	80 32       	cpi	r24, 0x20	; 32
    12be:	19 f0       	breq	.+6      	; 0x12c6 <isspace+0x10>
    12c0:	89 50       	subi	r24, 0x09	; 9
    12c2:	85 50       	subi	r24, 0x05	; 5
    12c4:	c8 f7       	brcc	.-14     	; 0x12b8 <isspace+0x2>
    12c6:	08 95       	ret

000012c8 <toupper>:
    12c8:	91 11       	cpse	r25, r1
    12ca:	08 95       	ret
    12cc:	81 56       	subi	r24, 0x61	; 97
    12ce:	8a 51       	subi	r24, 0x1A	; 26
    12d0:	08 f4       	brcc	.+2      	; 0x12d4 <toupper+0xc>
    12d2:	80 52       	subi	r24, 0x20	; 32
    12d4:	85 58       	subi	r24, 0x85	; 133
    12d6:	08 95       	ret

000012d8 <strcmp>:
    12d8:	fb 01       	movw	r30, r22
    12da:	dc 01       	movw	r26, r24
    12dc:	8d 91       	ld	r24, X+
    12de:	01 90       	ld	r0, Z+
    12e0:	80 19       	sub	r24, r0
    12e2:	01 10       	cpse	r0, r1
    12e4:	d9 f3       	breq	.-10     	; 0x12dc <strcmp+0x4>
    12e6:	99 0b       	sbc	r25, r25
    12e8:	08 95       	ret

000012ea <__mulhi_const_10>:
    12ea:	7a e0       	ldi	r23, 0x0A	; 10
    12ec:	97 9f       	mul	r25, r23
    12ee:	90 2d       	mov	r25, r0
    12f0:	87 9f       	mul	r24, r23
    12f2:	80 2d       	mov	r24, r0
    12f4:	91 0d       	add	r25, r1
    12f6:	11 24       	eor	r1, r1
    12f8:	08 95       	ret

000012fa <__ctype_isfalse>:
    12fa:	99 27       	eor	r25, r25
    12fc:	88 27       	eor	r24, r24

000012fe <__ctype_istrue>:
    12fe:	08 95       	ret

00001300 <_exit>:
    1300:	f8 94       	cli

00001302 <__stop_program>:
    1302:	ff cf       	rjmp	.-2      	; 0x1302 <__stop_program>
